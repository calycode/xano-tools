{
   "bucket": {
      "upload": "xano-upload"
   },
   "schema": [
      {
         "name": "blob",
         "access": "public",
         "schema": {
            "access?=public": "enum|values([\"public\",\"private\"])",
            "path": "text",
            "name": "text",
            "type": "text",
            "size": "int",
            "mime": "text",
            "meta": "json"
         },
         "schema2": [
            {
               "name": "access",
               "nullable": false,
               "required": false,
               "default": "public",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["public", "private"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "path",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "size",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "mime",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "meta",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "blob_img",
         "access": "public",
         "schema": {
            "access?=public": "enum|values([\"public\",\"private\"])",
            "path": "text",
            "name": "text",
            "type": "text",
            "size": "int",
            "mime": "text",
            "meta": "json"
         },
         "schema2": [
            {
               "name": "access",
               "nullable": false,
               "required": false,
               "default": "public",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["public", "private"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "path",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "size",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "mime",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "meta",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "blob_audio",
         "access": "public",
         "schema": {
            "access?=public": "enum|values([\"public\",\"private\"])",
            "path": "text",
            "name": "text",
            "type": "text",
            "size": "int",
            "mime": "text",
            "meta": "json"
         },
         "schema2": [
            {
               "name": "access",
               "nullable": false,
               "required": false,
               "default": "public",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["public", "private"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "path",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "size",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "mime",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "meta",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "blob_video",
         "access": "public",
         "schema": {
            "access?=public": "enum|values([\"public\",\"private\"])",
            "path": "text",
            "name": "text",
            "type": "text",
            "size": "int",
            "mime": "text",
            "meta": "json"
         },
         "schema2": [
            {
               "name": "access",
               "nullable": false,
               "required": false,
               "default": "public",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["public", "private"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "path",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "size",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "mime",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "meta",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "bool",
         "access": "public",
         "schema": "bool",
         "schema2": "bool",
         "default": false,
         "methods": []
      },
      {
         "name": "decimal",
         "access": "public",
         "schema": "decimal",
         "schema2": "decimal",
         "default": 0,
         "methods": [
            {
               "name": "min",
               "description": "Enforces a minimum value for this entry.",
               "arg": [
                  {
                     "name": "Value",
                     "description": "The minimum value of this entry.",
                     "placeholder": "Enter min value.",
                     "default": 0,
                     "type": "decimal",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "max",
               "description": "Enforces a maximum value for this entry.",
               "arg": [
                  {
                     "name": "Value",
                     "description": "The maximum value of this input.",
                     "placeholder": "Enter max value.",
                     "default": 0,
                     "type": "decimal",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            }
         ]
      },
      {
         "name": "email",
         "access": "public",
         "schema": "text",
         "schema2": "text",
         "default": "",
         "methods": [
            {
               "name": "trim",
               "description": "Removes excess whitespace from the beginning and end of the entry.",
               "arg": []
            },
            {
               "name": "lower",
               "description": "Convert all characters to lowercase.",
               "arg": []
            }
         ]
      },
      {
         "name": "enum",
         "access": "public",
         "schema": "text",
         "schema2": "text",
         "default": {},
         "methods": []
      },
      {
         "name": "file",
         "access": "public",
         "schema": "file",
         "schema2": "file",
         "default": {},
         "methods": []
      },
      {
         "name": "int",
         "access": "public",
         "schema": "int",
         "schema2": "int",
         "default": 0,
         "methods": [
            {
               "name": "min",
               "description": "Enforces a minimum value for this entry.",
               "arg": [
                  {
                     "name": "Value",
                     "description": "The minimum value of this entry.",
                     "placeholder": "Enter min value.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "max",
               "description": "Enforces a maximum value for this entry.",
               "arg": [
                  {
                     "name": "Value",
                     "description": "The maximum value of this input.",
                     "placeholder": "Enter max value.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            }
         ]
      },
      {
         "name": "json",
         "access": "public",
         "schema": "json",
         "schema2": "json",
         "default": {},
         "methods": []
      },
      {
         "name": "obj",
         "access": "public",
         "schema": "json",
         "schema2": "json",
         "default": {},
         "methods": []
      },
      {
         "name": "password",
         "access": "public",
         "schema": "text",
         "schema2": "text",
         "default": {},
         "methods": [
            {
               "name": "min",
               "description": "Enforces a minimum length for the entry length.",
               "arg": [
                  {
                     "name": "Min Length",
                     "description": "The minimum length of this input.",
                     "placeholder": "Enter min length of input.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "max",
               "description": "Enforces a maximum length for the entry length.",
               "arg": [
                  {
                     "name": "Max Length",
                     "description": "The maximum length of this input.",
                     "placeholder": "Enter max length of input.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "minAlpha",
               "description": "Enforces a minimum number of alpha characters.",
               "arg": [
                  {
                     "name": "Num",
                     "description": "The number of characters.",
                     "placeholder": "Enter minimum number of characters.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "minLowerAlpha",
               "description": "Enforces a minimum number of lowercase alpha characters.",
               "arg": [
                  {
                     "name": "Num",
                     "description": "The number of characters.",
                     "placeholder": "Enter minimum number of characters.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "minUpperAlpha",
               "description": "Enforces a minimum number of uppercase alpha characters.",
               "arg": [
                  {
                     "name": "Num",
                     "description": "The number of characters.",
                     "placeholder": "Enter minimum number of characters.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "minDigit",
               "description": "Enforces a minimum number of numeric characters.",
               "arg": [
                  {
                     "name": "Num",
                     "description": "The number of characters.",
                     "placeholder": "Enter minimum number of characters.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "minSymbol",
               "description": "Enforces a minimum number of punctuation characters.",
               "arg": [
                  {
                     "name": "Num",
                     "description": "The number of characters.",
                     "placeholder": "Enter minimum number of characters.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            }
         ]
      },
      {
         "name": "text",
         "access": "public",
         "schema": "text",
         "schema2": "text",
         "default": "",
         "methods": [
            {
               "name": "trim",
               "description": "Removes excess whitespace from the beginning and end of the entry.",
               "arg": []
            },
            {
               "name": "min",
               "description": "Enforces a minimum length for the entry length.",
               "arg": [
                  {
                     "name": "Min Length",
                     "description": "The minimum length of this input.",
                     "placeholder": "Enter min length of input.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "max",
               "description": "Enforces a maximum length for the entry length.",
               "arg": [
                  {
                     "name": "Max Length",
                     "description": "The maximum length of this input.",
                     "placeholder": "Enter max length of input.",
                     "default": 0,
                     "type": "int",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "startsWith",
               "description": "Enforces a prefix.",
               "arg": [
                  {
                     "name": "Prefix",
                     "description": "The prefix.",
                     "placeholder": "Enter the prefix.",
                     "default": "",
                     "type": "text",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "prevent",
               "description": "Add a blacklist phrase.",
               "arg": [
                  {
                     "name": "Prevent Phrase",
                     "description": "The phrase.",
                     "placeholder": "Enter the prevention phrase.",
                     "default": "",
                     "type": "text",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "lower",
               "description": "Convert all characters to lowercase.",
               "arg": []
            },
            {
               "name": "upper",
               "description": "Convert all characters to uppercase.",
               "arg": []
            },
            {
               "name": "alphaOk",
               "description": "Whitelist alphabet characters.",
               "arg": []
            },
            {
               "name": "digitOk",
               "description": "Whitelist numerical characters.",
               "arg": []
            },
            {
               "name": "ok",
               "description": "Whitelist characters.",
               "arg": [
                  {
                     "name": "Characters",
                     "description": "The characters.",
                     "placeholder": "Enter the whitelisted characters.",
                     "default": "",
                     "type": "text",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            },
            {
               "name": "pattern",
               "description": "Validate with regex pattern.",
               "arg": [
                  {
                     "name": "pattern",
                     "description": "The regex pattern to validate the entry.",
                     "placeholder": "Enter a regex pattern that validates the entry.",
                     "default": "",
                     "type": "text",
                     "style": {
                        "type": "single"
                     }
                  },
                  {
                     "name": "error",
                     "description": "A custom error message if the validation fails.",
                     "placeholder": "Enter a custom error message if the validation fails.",
                     "default": "",
                     "type": "text",
                     "style": {
                        "type": "single"
                     }
                  }
               ]
            }
         ]
      },
      {
         "name": "uuid",
         "access": "public",
         "schema": "uuid",
         "schema2": "uuid",
         "default": "",
         "methods": []
      },
      {
         "name": "vector",
         "access": "public",
         "schema": "vector",
         "schema2": "vector",
         "default": [],
         "methods": []
      },
      {
         "name": "epochms",
         "access": "public",
         "schema": "int",
         "schema2": "int",
         "default": 0,
         "methods": []
      },
      {
         "name": "date",
         "access": "public",
         "schema": "date",
         "schema2": "date",
         "default": 0,
         "methods": []
      },
      {
         "name": "geo_point",
         "access": "public",
         "schema": "geo",
         "schema2": "geo",
         "default": {},
         "methods": []
      },
      {
         "name": "geo_linestring",
         "access": "public",
         "schema": "geo",
         "schema2": "geo",
         "default": {},
         "methods": []
      },
      {
         "name": "geo_polygon",
         "access": "public",
         "schema": "geo",
         "schema2": "geo",
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_addon",
         "access": "private",
         "schema": {
            "id": "json",
            "offset": "text",
            "as": "text",
            "input[]": "mvp_inputroute",
            "output": {
               "customize": "bool",
               "items[]": "mvp_output"
            },
            "children[]": "mvp_addon"
         },
         "schema2": [
            {
               "name": "id",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "offset",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "as",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "input",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_inputroute"
            },
            {
               "name": "output",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "customize",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "bool"
                  },
                  {
                     "name": "items",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_output"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_addon"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_bind",
         "access": "private",
         "schema": {
            "dbo": "mvp_dbo",
            "join?=inner": "enum|values([\"inner\",\"left\",\"right\"])",
            "search": "mvp_search"
         },
         "schema2": [
            {
               "name": "dbo",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_dbo"
            },
            {
               "name": "join",
               "nullable": false,
               "required": false,
               "default": "inner",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["inner", "left", "right"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "search",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_search"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_context",
         "access": "private",
         "schema": {
            "dbo": "mvp_dbo",
            "bind[]": "mvp_bind",
            "search": "mvp_search",
            "lock": {
               "value?=false": "text",
               "tag?=const:bool": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "external": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter",
               "permissions": {
                  "search?=true": "bool",
                  "sort?=true": "bool",
                  "per_page?=false": "bool",
                  "page?=true": "bool"
               }
            },
            "simpleExternal": {
               "page": {
                  "value": "text",
                  "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]": "mvp_filter"
               },
               "per_page": {
                  "value": "text",
                  "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]": "mvp_filter"
               },
               "offset": {
                  "value": "text",
                  "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]": "mvp_filter"
               },
               "search": {
                  "value": "text",
                  "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]": "mvp_filter"
               },
               "sort": {
                  "value": "text",
                  "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]": "mvp_filter"
               }
            },
            "eval[]": "mvp_eval",
            "sort[]": "mvp_sort",
            "return": "mvp_return"
         },
         "schema2": [
            {
               "name": "dbo",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_dbo"
            },
            {
               "name": "bind",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_bind"
            },
            {
               "name": "search",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_search"
            },
            {
               "name": "lock",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "value",
                     "nullable": false,
                     "required": false,
                     "default": false,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "tag",
                     "nullable": false,
                     "required": false,
                     "default": "const:bool",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [
                              [
                                 "const",
                                 "const:encoded",
                                 "const:int",
                                 "const:decimal",
                                 "const:bool",
                                 "const:array",
                                 "const:epochms",
                                 "const:obj",
                                 "const:null",
                                 "const:expr",
                                 "const:expr:encoded",
                                 "input",
                                 "var",
                                 "auth",
                                 "env",
                                 "setting",
                                 "col",
                                 "output",
                                 "response",
                                 "trycatch"
                              ]
                           ]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "filters",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_filter"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "external",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "value",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "tag",
                     "nullable": false,
                     "required": false,
                     "default": "input",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [
                              [
                                 "const",
                                 "const:encoded",
                                 "const:int",
                                 "const:decimal",
                                 "const:bool",
                                 "const:array",
                                 "const:epochms",
                                 "const:obj",
                                 "const:null",
                                 "const:expr",
                                 "const:expr:encoded",
                                 "input",
                                 "var",
                                 "auth",
                                 "env",
                                 "setting",
                                 "col",
                                 "output",
                                 "response",
                                 "trycatch"
                              ]
                           ]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "filters",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_filter"
                  },
                  {
                     "name": "permissions",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "search",
                           "nullable": false,
                           "required": false,
                           "default": true,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "sort",
                           "nullable": false,
                           "required": false,
                           "default": true,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "per_page",
                           "nullable": false,
                           "required": false,
                           "default": false,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "page",
                           "nullable": false,
                           "required": false,
                           "default": true,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        }
                     ],
                     "type": "obj"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "simpleExternal",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "page",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "value",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "text"
                        },
                        {
                           "name": "tag",
                           "nullable": false,
                           "required": false,
                           "default": "input",
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "values",
                                 "arg": [
                                    [
                                       "const",
                                       "const:encoded",
                                       "const:int",
                                       "const:decimal",
                                       "const:bool",
                                       "const:array",
                                       "const:epochms",
                                       "const:obj",
                                       "const:null",
                                       "const:expr",
                                       "const:expr:encoded",
                                       "input",
                                       "var",
                                       "auth",
                                       "env",
                                       "setting",
                                       "col",
                                       "output",
                                       "response",
                                       "trycatch"
                                    ]
                                 ]
                              }
                           ],
                           "children": [],
                           "type": "enum"
                        },
                        {
                           "name": "filters",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "list",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "mvp_filter"
                        }
                     ],
                     "type": "obj"
                  },
                  {
                     "name": "per_page",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "value",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "text"
                        },
                        {
                           "name": "tag",
                           "nullable": false,
                           "required": false,
                           "default": "input",
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "values",
                                 "arg": [
                                    [
                                       "const",
                                       "const:encoded",
                                       "const:int",
                                       "const:decimal",
                                       "const:bool",
                                       "const:array",
                                       "const:epochms",
                                       "const:obj",
                                       "const:null",
                                       "const:expr",
                                       "const:expr:encoded",
                                       "input",
                                       "var",
                                       "auth",
                                       "env",
                                       "setting",
                                       "col",
                                       "output",
                                       "response",
                                       "trycatch"
                                    ]
                                 ]
                              }
                           ],
                           "children": [],
                           "type": "enum"
                        },
                        {
                           "name": "filters",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "list",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "mvp_filter"
                        }
                     ],
                     "type": "obj"
                  },
                  {
                     "name": "offset",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "value",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "text"
                        },
                        {
                           "name": "tag",
                           "nullable": false,
                           "required": false,
                           "default": "input",
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "values",
                                 "arg": [
                                    [
                                       "const",
                                       "const:encoded",
                                       "const:int",
                                       "const:decimal",
                                       "const:bool",
                                       "const:array",
                                       "const:epochms",
                                       "const:obj",
                                       "const:null",
                                       "const:expr",
                                       "const:expr:encoded",
                                       "input",
                                       "var",
                                       "auth",
                                       "env",
                                       "setting",
                                       "col",
                                       "output",
                                       "response",
                                       "trycatch"
                                    ]
                                 ]
                              }
                           ],
                           "children": [],
                           "type": "enum"
                        },
                        {
                           "name": "filters",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "list",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "mvp_filter"
                        }
                     ],
                     "type": "obj"
                  },
                  {
                     "name": "search",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "value",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "text"
                        },
                        {
                           "name": "tag",
                           "nullable": false,
                           "required": false,
                           "default": "input",
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "values",
                                 "arg": [
                                    [
                                       "const",
                                       "const:encoded",
                                       "const:int",
                                       "const:decimal",
                                       "const:bool",
                                       "const:array",
                                       "const:epochms",
                                       "const:obj",
                                       "const:null",
                                       "const:expr",
                                       "const:expr:encoded",
                                       "input",
                                       "var",
                                       "auth",
                                       "env",
                                       "setting",
                                       "col",
                                       "output",
                                       "response",
                                       "trycatch"
                                    ]
                                 ]
                              }
                           ],
                           "children": [],
                           "type": "enum"
                        },
                        {
                           "name": "filters",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "list",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "mvp_filter"
                        }
                     ],
                     "type": "obj"
                  },
                  {
                     "name": "sort",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "value",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "text"
                        },
                        {
                           "name": "tag",
                           "nullable": false,
                           "required": false,
                           "default": "input",
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "values",
                                 "arg": [
                                    [
                                       "const",
                                       "const:encoded",
                                       "const:int",
                                       "const:decimal",
                                       "const:bool",
                                       "const:array",
                                       "const:epochms",
                                       "const:obj",
                                       "const:null",
                                       "const:expr",
                                       "const:expr:encoded",
                                       "input",
                                       "var",
                                       "auth",
                                       "env",
                                       "setting",
                                       "col",
                                       "output",
                                       "response",
                                       "trycatch"
                                    ]
                                 ]
                              }
                           ],
                           "children": [],
                           "type": "enum"
                        },
                        {
                           "name": "filters",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "list",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "mvp_filter"
                        }
                     ],
                     "type": "obj"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "eval",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_eval"
            },
            {
               "name": "sort",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_sort"
            },
            {
               "name": "return",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_return"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_dbo",
         "access": "private",
         "schema": {
            "id": "json",
            "as": "text"
         },
         "schema2": [
            {
               "name": "id",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "as",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_eval",
         "access": "private",
         "schema": {
            "name": "text",
            "as": "text",
            "filters[]": "mvp_filter"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "as",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "filters",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_filter"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_expression",
         "access": "private",
         "schema": {
            "type?=statement": "enum|values([\"statement\",\"group\"])",
            "statement?": "mvp_statement",
            "or?=false": "bool",
            "group?": "mvp_search"
         },
         "schema2": [
            {
               "name": "type",
               "nullable": false,
               "required": false,
               "default": "statement",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["statement", "group"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "statement",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_statement"
            },
            {
               "name": "or",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "group",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_search"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_group",
         "access": "private",
         "schema": {
            "name": "text",
            "as": "text",
            "filters[]?=[]": "mvp_filter"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "as",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "filters",
               "nullable": false,
               "required": false,
               "default": [],
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_filter"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_index",
         "access": "private",
         "schema": {
            "name": "text",
            "as": "text"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "as",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_map",
         "access": "private",
         "schema": {
            "name": "text",
            "?value": "text",
            "methods[]": "mvp_method",
            "children[]": "mvp_map"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "value",
               "nullable": true,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "methods",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_method"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_map"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_method",
         "access": "private",
         "schema": {
            "name": "text",
            "disabled?=false": "bool",
            "arg[]": "json"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "disabled",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "arg",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_param",
         "access": "private",
         "schema": {
            "name": "text",
            "type": "text",
            "nullable": "bool",
            "required?=true": "bool",
            "description": "text",
            "?default": "json",
            "hasDefault": "bool",
            "op?=\"=\"": "enum|values([\"=\",\"+\"])",
            "style": {
               "type?=single": "enum|values([\"single\",\"list\",\"hash\"])",
               "?min": "int",
               "?max": "int"
            },
            "methods[]": "mvp_method",
            "children[]": "mvp_param"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "nullable",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "required",
               "nullable": false,
               "required": false,
               "default": true,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "description",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "default",
               "nullable": true,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "hasDefault",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "op",
               "nullable": false,
               "required": false,
               "default": "=",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["=", "+"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "style",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "type",
                     "nullable": false,
                     "required": false,
                     "default": "single",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [["single", "list", "hash"]]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "min",
                     "nullable": true,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "int"
                  },
                  {
                     "name": "max",
                     "nullable": true,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "int"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "methods",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_method"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_param"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_precondition",
         "access": "private",
         "schema": {
            "id": "int",
            "input[]": {
               "left": {
                  "operand": "text"
               },
               "right": {
                  "operand": "text",
                  "type?=input": "enum|values([\"const\",\"input\"])"
               }
            }
         },
         "schema2": [
            {
               "name": "id",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "input",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "left",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "operand",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "text"
                        }
                     ],
                     "type": "obj"
                  },
                  {
                     "name": "right",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "operand",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "text"
                        },
                        {
                           "name": "type",
                           "nullable": false,
                           "required": false,
                           "default": "input",
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "values",
                                 "arg": [["const", "input"]]
                              }
                           ],
                           "children": [],
                           "type": "enum"
                        }
                     ],
                     "type": "obj"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_return",
         "access": "private",
         "schema": {
            "type?=list": "enum|values([\"exists\",\"count\",\"single\",\"list\",\"aggregate\",\"stream\"])",
            "single": {
               "sort[]": "mvp_sort"
            },
            "list": {
               "distinct?=auto": "enum|values([\"auto\",\"yes\",\"no\"])",
               "sort[]": "mvp_sort",
               "paging": {
                  "enabled": "bool",
                  "page?=1": "int|min(1)",
                  "offset?=0": "int",
                  "per_page?=25": "int|min(1)",
                  "metadata?=true": "bool",
                  "totals": "bool"
               }
            },
            "stream": {
               "distinct?=auto": "enum|values([\"auto\",\"yes\",\"no\"])",
               "sort[]": "mvp_sort",
               "paging": {
                  "enabled": "bool",
                  "page?=1": "int|min(1)",
                  "per_page?=25": "int|min(1)"
               }
            },
            "aggregate": {
               "group[]": "mvp_group",
               "sort[]": "mvp_sort",
               "index[]": "mvp_index",
               "eval[]": "mvp_eval",
               "paging": {
                  "enabled": "bool",
                  "page?=1": "int|min(1)",
                  "per_page?=25": "int|min(1)",
                  "metadata?=true": "bool"
               }
            }
         },
         "schema2": [
            {
               "name": "type",
               "nullable": false,
               "required": false,
               "default": "list",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["exists", "count", "single", "list", "aggregate", "stream"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "single",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "sort",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_sort"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "list",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "distinct",
                     "nullable": false,
                     "required": false,
                     "default": "auto",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [["auto", "yes", "no"]]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "sort",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_sort"
                  },
                  {
                     "name": "paging",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "enabled",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "page",
                           "nullable": false,
                           "required": false,
                           "default": 1,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "min",
                                 "arg": [1]
                              }
                           ],
                           "children": [],
                           "type": "int"
                        },
                        {
                           "name": "offset",
                           "nullable": false,
                           "required": false,
                           "default": 0,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "int"
                        },
                        {
                           "name": "per_page",
                           "nullable": false,
                           "required": false,
                           "default": 25,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "min",
                                 "arg": [1]
                              }
                           ],
                           "children": [],
                           "type": "int"
                        },
                        {
                           "name": "metadata",
                           "nullable": false,
                           "required": false,
                           "default": true,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "totals",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        }
                     ],
                     "type": "obj"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "stream",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "distinct",
                     "nullable": false,
                     "required": false,
                     "default": "auto",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [["auto", "yes", "no"]]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "sort",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_sort"
                  },
                  {
                     "name": "paging",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "enabled",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "page",
                           "nullable": false,
                           "required": false,
                           "default": 1,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "min",
                                 "arg": [1]
                              }
                           ],
                           "children": [],
                           "type": "int"
                        },
                        {
                           "name": "per_page",
                           "nullable": false,
                           "required": false,
                           "default": 25,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "min",
                                 "arg": [1]
                              }
                           ],
                           "children": [],
                           "type": "int"
                        }
                     ],
                     "type": "obj"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "aggregate",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "group",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_group"
                  },
                  {
                     "name": "sort",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_sort"
                  },
                  {
                     "name": "index",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_index"
                  },
                  {
                     "name": "eval",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_eval"
                  },
                  {
                     "name": "paging",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "enabled",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "page",
                           "nullable": false,
                           "required": false,
                           "default": 1,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "min",
                                 "arg": [1]
                              }
                           ],
                           "children": [],
                           "type": "int"
                        },
                        {
                           "name": "per_page",
                           "nullable": false,
                           "required": false,
                           "default": 25,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [
                              {
                                 "name": "min",
                                 "arg": [1]
                              }
                           ],
                           "children": [],
                           "type": "int"
                        },
                        {
                           "name": "metadata",
                           "nullable": false,
                           "required": false,
                           "default": true,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        }
                     ],
                     "type": "obj"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_search",
         "access": "private",
         "schema": {
            "expression[]": "mvp_expression"
         },
         "schema2": [
            {
               "name": "expression",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_expression"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_sort",
         "access": "private",
         "schema": {
            "sortBy": "text",
            "orderBy?=asc": "enum|values([\"asc\",\"desc\",\"rand\"])"
         },
         "schema2": [
            {
               "name": "sortBy",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "orderBy",
               "nullable": false,
               "required": false,
               "default": "asc",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["asc", "desc", "rand"]]
                  }
               ],
               "children": [],
               "type": "enum"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_simple_filter",
         "access": "private",
         "schema": {
            "column": "text",
            "value": "json",
            "op?=\"==\"": "enum|values([\"==\",\"!=\",\"<\",\"<=\",\">\",\">=\",\"in\",\"not in\"])"
         },
         "schema2": [
            {
               "name": "column",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "value",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "op",
               "nullable": false,
               "required": false,
               "default": "==",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["==", "!=", "<", "<=", ">", ">=", "in", "not in"]]
                  }
               ],
               "children": [],
               "type": "enum"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_statement",
         "access": "private",
         "schema": {
            "left": {
               "operand": "text",
               "tag?=const": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": "mvp_filter"
            },
            "op?=\"=\"": "text",
            "right": {
               "operand": "text",
               "tag?=const": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": "mvp_filter",
               "ignore_empty?=false": "bool"
            }
         },
         "schema2": [
            {
               "name": "left",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "operand",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "tag",
                     "nullable": false,
                     "required": false,
                     "default": "const",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [
                              [
                                 "const",
                                 "const:encoded",
                                 "const:int",
                                 "const:decimal",
                                 "const:bool",
                                 "const:array",
                                 "const:epochms",
                                 "const:obj",
                                 "const:null",
                                 "const:expr",
                                 "const:expr:encoded",
                                 "input",
                                 "var",
                                 "auth",
                                 "env",
                                 "setting",
                                 "col",
                                 "output",
                                 "response",
                                 "trycatch"
                              ]
                           ]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "filters",
                     "nullable": false,
                     "required": false,
                     "default": [],
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_filter"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "op",
               "nullable": false,
               "required": false,
               "default": "=",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "right",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "operand",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "tag",
                     "nullable": false,
                     "required": false,
                     "default": "const",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [
                              [
                                 "const",
                                 "const:encoded",
                                 "const:int",
                                 "const:decimal",
                                 "const:bool",
                                 "const:array",
                                 "const:epochms",
                                 "const:obj",
                                 "const:null",
                                 "const:expr",
                                 "const:expr:encoded",
                                 "input",
                                 "var",
                                 "auth",
                                 "env",
                                 "setting",
                                 "col",
                                 "output",
                                 "response",
                                 "trycatch"
                              ]
                           ]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "filters",
                     "nullable": false,
                     "required": false,
                     "default": [],
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_filter"
                  },
                  {
                     "name": "ignore_empty",
                     "nullable": false,
                     "required": false,
                     "default": false,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "bool"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_stackitem",
         "access": "private",
         "schema": {
            "name": "text",
            "as": "text",
            "context": "json",
            "description": "text",
            "disabled": "bool",
            "input[]": "mvp_inputroute",
            "output": {
               "customize": "bool",
               "filters[]": "mvp_filter",
               "items[]": "mvp_output"
            },
            "addon[]": "mvp_addon",
            "mocks?={}": "json",
            "_xsid?=\"\"": "text",
            "?runtime": {
               "mode?=disabled": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
               "cpu": "text",
               "memory": "text",
               "max_retry": "int",
               "timeout": "int"
            }
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "as",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "context",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "description",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "disabled",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "input",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_inputroute"
            },
            {
               "name": "output",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "customize",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "bool"
                  },
                  {
                     "name": "filters",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_filter"
                  },
                  {
                     "name": "items",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_output"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "addon",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_addon"
            },
            {
               "name": "mocks",
               "nullable": false,
               "required": false,
               "default": {},
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "_xsid",
               "nullable": false,
               "required": false,
               "default": "",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "runtime",
               "nullable": true,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "mode",
                     "nullable": false,
                     "required": false,
                     "default": "disabled",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [["disabled", "async-shared", "async-dedicated"]]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "cpu",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "memory",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "max_retry",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "int"
                  },
                  {
                     "name": "timeout",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "int"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_inputroute",
         "access": "private",
         "schema": {
            "name": "text",
            "value": "text",
            "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]": "mvp_filter",
            "ignore": "bool",
            "expand": "bool",
            "children[]": "mvp_inputroute"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "value",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "tag",
               "nullable": false,
               "required": false,
               "default": "input",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [
                        [
                           "const",
                           "const:encoded",
                           "const:int",
                           "const:decimal",
                           "const:bool",
                           "const:array",
                           "const:epochms",
                           "const:obj",
                           "const:null",
                           "const:expr",
                           "const:expr:encoded",
                           "input",
                           "var",
                           "auth",
                           "env",
                           "setting",
                           "col",
                           "output",
                           "response",
                           "trycatch"
                        ]
                     ]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "filters",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_filter"
            },
            {
               "name": "ignore",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "expand",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_inputroute"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_resultitem",
         "access": "private",
         "schema": {
            "_xsid?=\"\"": "text",
            "disabled?=false": "bool",
            "name": "text",
            "value": "text",
            "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]": "mvp_filter"
         },
         "schema2": [
            {
               "name": "_xsid",
               "nullable": false,
               "required": false,
               "default": "",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "disabled",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "value",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "tag",
               "nullable": false,
               "required": false,
               "default": "input",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [
                        [
                           "const",
                           "const:encoded",
                           "const:int",
                           "const:decimal",
                           "const:bool",
                           "const:array",
                           "const:epochms",
                           "const:obj",
                           "const:null",
                           "const:expr",
                           "const:expr:encoded",
                           "input",
                           "var",
                           "auth",
                           "env",
                           "setting",
                           "col",
                           "output",
                           "response",
                           "trycatch"
                        ]
                     ]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "filters",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_filter"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_filter",
         "access": "private",
         "schema": {
            "name": "text",
            "disabled?=false": "bool",
            "arg[]": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            }
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "disabled",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "arg",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "value",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "tag",
                     "nullable": false,
                     "required": false,
                     "default": "input",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [
                              [
                                 "const",
                                 "const:encoded",
                                 "const:int",
                                 "const:decimal",
                                 "const:bool",
                                 "const:array",
                                 "const:epochms",
                                 "const:obj",
                                 "const:null",
                                 "const:expr",
                                 "const:expr:encoded",
                                 "input",
                                 "var",
                                 "auth",
                                 "env",
                                 "setting",
                                 "col",
                                 "output",
                                 "response",
                                 "trycatch"
                              ]
                           ]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "filters",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_filter"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_truth",
         "access": "private",
         "schema": {
            "value": "text",
            "tag?=var": "enum|values([\"var\",\"input\",\"const\",\"const:encoded\",\"auth\"])",
            "filters[]": "mvp_filter",
            "mode?=and": "enum|values([\"and\",\"or\"])",
            "group": "bool",
            "children[]": "mvp_truth"
         },
         "schema2": [
            {
               "name": "value",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "tag",
               "nullable": false,
               "required": false,
               "default": "var",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["var", "input", "const", "const:encoded", "auth"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "filters",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_filter"
            },
            {
               "name": "mode",
               "nullable": false,
               "required": false,
               "default": "and",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["and", "or"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "group",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_truth"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_input",
         "access": "private",
         "schema": {
            "_xsid?=\"\"": "text",
            "name": "text",
            "type": "text",
            "description?": "text",
            "nullable": "bool",
            "default?": "text",
            "merge": "bool",
            "hidden[]": "text",
            "override[]": "text",
            "customize": "json",
            "required": "bool",
            "values[]": "json",
            "mode?": "text",
            "format?": "text",
            "sensitive?=false": "bool",
            "list": {
               "min?=\"\"": "json",
               "max?=\"\"": "json"
            },
            "vector?={}": {
               "size?=3": "int|min(1)"
            },
            "access?=public": "enum|values([\"public\",\"private\",\"internal\"])",
            "style": {
               "type?=single": "enum|values([\"single\",\"list\"])"
            },
            "children[]": "mvp_input",
            "methods[]": "mvp_method",
            "market_item": "mvp_marketitem"
         },
         "schema2": [
            {
               "name": "_xsid",
               "nullable": false,
               "required": false,
               "default": "",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "description",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "nullable",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "default",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "merge",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "hidden",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "override",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "customize",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "required",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "values",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "mode",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "format",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "sensitive",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "list",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "min",
                     "nullable": false,
                     "required": false,
                     "default": "",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "json"
                  },
                  {
                     "name": "max",
                     "nullable": false,
                     "required": false,
                     "default": "",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "json"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "vector",
               "nullable": false,
               "required": false,
               "default": {},
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "size",
                     "nullable": false,
                     "required": false,
                     "default": 3,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "min",
                           "arg": [1]
                        }
                     ],
                     "children": [],
                     "type": "int"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "access",
               "nullable": false,
               "required": false,
               "default": "public",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["public", "private", "internal"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "style",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "type",
                     "nullable": false,
                     "required": false,
                     "default": "single",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [["single", "list"]]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  }
               ],
               "type": "obj"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_input"
            },
            {
               "name": "methods",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_method"
            },
            {
               "name": "market_item",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_marketitem"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_schema_input",
         "access": "private",
         "schema": {
            "name": "text|pattern(\"^[a-zA-Z0-9_][a-zA-Z0-9_-]*$\",\"\")",
            "type": "enum|values([\"text\",\"int\",\"decimal\",\"bool\",\"uuid\",\"timestamp\",\"date\",\"email\",\"enum\",\"password\",\"json\",\"object\",\"video\",\"image\",\"attachment\",\"audio\",\"geo_point\",\"geo_multipoint\",\"geo_linestring\",\"geo_multilinestring\",\"geo_polygon\",\"geo_multipolygon\",\"vector\"])",
            "description?=\"\"": "text",
            "nullable?=false": "bool",
            "default?=\"\"": "json",
            "required?=false": "bool",
            "values[]": "json",
            "?tableref_id?=null": "int",
            "access?=public": "enum|values([\"public\",\"private\",\"internal\"])",
            "style?=single": "enum|values([\"single\",\"list\"])",
            "children[]?=[]": "mvp_schema_input",
            "?filters?=null": "json",
            "vector?={}": {
               "size?=3": "int|min(1)"
            }
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "pattern",
                     "arg": ["^[a-zA-Z0-9_][a-zA-Z0-9_-]*$", ""]
                  }
               ],
               "children": [],
               "type": "text"
            },
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [
                        [
                           "text",
                           "int",
                           "decimal",
                           "bool",
                           "uuid",
                           "timestamp",
                           "date",
                           "email",
                           "enum",
                           "password",
                           "json",
                           "object",
                           "video",
                           "image",
                           "attachment",
                           "audio",
                           "geo_point",
                           "geo_multipoint",
                           "geo_linestring",
                           "geo_multilinestring",
                           "geo_polygon",
                           "geo_multipolygon",
                           "vector"
                        ]
                     ]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "description",
               "nullable": false,
               "required": false,
               "default": "",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "nullable",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "default",
               "nullable": false,
               "required": false,
               "default": "",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "required",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "values",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "tableref_id",
               "nullable": true,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "access",
               "nullable": false,
               "required": false,
               "default": "public",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["public", "private", "internal"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "style",
               "nullable": false,
               "required": false,
               "default": "single",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["single", "list"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "children",
               "nullable": false,
               "required": false,
               "default": [],
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_schema_input"
            },
            {
               "name": "filters",
               "nullable": true,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "json"
            },
            {
               "name": "vector",
               "nullable": false,
               "required": false,
               "default": {},
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "size",
                     "nullable": false,
                     "required": false,
                     "default": 3,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "min",
                           "arg": [1]
                        }
                     ],
                     "children": [],
                     "type": "int"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_output",
         "access": "private",
         "schema": {
            "name": "text",
            "children[]": "mvp_output"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_output"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_selectedoutput",
         "access": "private",
         "schema": {
            "name": "text",
            "selected": "bool",
            "children[]": "mvp_selectedoutput"
         },
         "schema2": [
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "selected",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "children",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_selectedoutput"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_schedule",
         "access": "private",
         "schema": {
            "starts_on": "timestamp",
            "repeat": {
               "enabled": "bool",
               "ends": {
                  "enabled": "bool",
                  "on": "timestamp"
               },
               "freq": "int"
            }
         },
         "schema2": [
            {
               "name": "starts_on",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "timestamp"
            },
            {
               "name": "repeat",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "enabled",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "bool"
                  },
                  {
                     "name": "ends",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [
                        {
                           "name": "enabled",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "bool"
                        },
                        {
                           "name": "on",
                           "nullable": false,
                           "required": true,
                           "default": null,
                           "style": {
                              "type": "single",
                              "min": null,
                              "max": null
                           },
                           "op": "=",
                           "methods": [],
                           "children": [],
                           "type": "timestamp"
                        }
                     ],
                     "type": "obj"
                  },
                  {
                     "name": "freq",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "int"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_marketitem",
         "access": "private",
         "schema": {
            "id": "int",
            "version": "int",
            "guid": "text"
         },
         "schema2": [
            {
               "name": "id",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "version",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "guid",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_tag",
         "access": "private",
         "schema": {
            "tag": "text"
         },
         "schema2": [
            {
               "name": "tag",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_workspace_realtime",
         "access": "private",
         "schema": {
            "channels[]?=[]": "mvp_workspace_realtime_channel",
            "enabled?=false": "bool",
            "hash?": "text"
         },
         "schema2": [
            {
               "name": "channels",
               "nullable": false,
               "required": false,
               "default": [],
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_workspace_realtime_channel"
            },
            {
               "name": "enabled",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "hash",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_workspace_realtime_channel",
         "access": "private",
         "schema": {
            "anonymous_clients?=false": "bool",
            "client_authenticated_messaging?=false": "bool",
            "client_private_messaging?=false": "bool",
            "client_private_messaging_authenticated_only?=false": "bool",
            "client_public_messaging?=false": "bool",
            "client_public_messaging_authenticated_only?=false": "bool",
            "description?": "text",
            "enabled?=false": "bool",
            "history?=0": "enum|values([0,25,50,100,250,1000])",
            "id?": "int",
            "pattern": "text",
            "presence?=false": "bool",
            "wildcard?=false": "bool"
         },
         "schema2": [
            {
               "name": "anonymous_clients",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "client_authenticated_messaging",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "client_private_messaging",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "client_private_messaging_authenticated_only",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "client_public_messaging",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "client_public_messaging_authenticated_only",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "description",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "enabled",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "history",
               "nullable": false,
               "required": false,
               "default": 0,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [[0, 25, 50, 100, 250, 1000]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "id",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "int"
            },
            {
               "name": "pattern",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "presence",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "wildcard",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_test",
         "access": "private",
         "schema": {
            "datasource": "text",
            "description": "text",
            "expect[]": "mvp_test_expect",
            "id": "uuid",
            "input[]": "mvp_inputroute",
            "name": "text|trim",
            "token?": "text"
         },
         "schema2": [
            {
               "name": "datasource",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "description",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "expect",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_test_expect"
            },
            {
               "name": "id",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "uuid"
            },
            {
               "name": "input",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_inputroute"
            },
            {
               "name": "name",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "trim",
                     "arg": []
                  }
               ],
               "children": [],
               "type": "text"
            },
            {
               "name": "token",
               "nullable": false,
               "required": false,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_test_expect",
         "access": "private",
         "schema": {
            "type": "enum|values([\"to_be_defined\",\"to_be_empty\",\"to_be_false\",\"to_be_greater_than\",\"to_be_in_the_future\",\"to_be_in_the_past\",\"to_be_less_than\",\"to_be_null\",\"to_be_true\",\"to_be_within\",\"to_contain\",\"to_end_with\",\"to_equal\",\"to_match\",\"to_not_be_defined\",\"to_not_be_null\",\"to_not_equal\",\"to_start_with\",\"to_throw\"])",
            "vars[]?=[]": {
               "value": "text",
               "tag?=var": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            }
         },
         "schema2": [
            {
               "name": "type",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [
                        [
                           "to_be_defined",
                           "to_be_empty",
                           "to_be_false",
                           "to_be_greater_than",
                           "to_be_in_the_future",
                           "to_be_in_the_past",
                           "to_be_less_than",
                           "to_be_null",
                           "to_be_true",
                           "to_be_within",
                           "to_contain",
                           "to_end_with",
                           "to_equal",
                           "to_match",
                           "to_not_be_defined",
                           "to_not_be_null",
                           "to_not_equal",
                           "to_start_with",
                           "to_throw"
                        ]
                     ]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "vars",
               "nullable": false,
               "required": false,
               "default": [],
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [
                  {
                     "name": "value",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "text"
                  },
                  {
                     "name": "tag",
                     "nullable": false,
                     "required": false,
                     "default": "var",
                     "style": {
                        "type": "single",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [
                        {
                           "name": "values",
                           "arg": [
                              [
                                 "const",
                                 "const:encoded",
                                 "const:int",
                                 "const:decimal",
                                 "const:bool",
                                 "const:array",
                                 "const:epochms",
                                 "const:obj",
                                 "const:null",
                                 "const:expr",
                                 "const:expr:encoded",
                                 "input",
                                 "var",
                                 "auth",
                                 "env",
                                 "setting",
                                 "col",
                                 "output",
                                 "response",
                                 "trycatch"
                              ]
                           ]
                        }
                     ],
                     "children": [],
                     "type": "enum"
                  },
                  {
                     "name": "filters",
                     "nullable": false,
                     "required": true,
                     "default": null,
                     "style": {
                        "type": "list",
                        "min": null,
                        "max": null
                     },
                     "op": "=",
                     "methods": [],
                     "children": [],
                     "type": "mvp_filter"
                  }
               ],
               "type": "obj"
            }
         ],
         "default": {},
         "methods": []
      },
      {
         "name": "mvp_test_mock",
         "access": "private",
         "schema": {
            "enabled?=false": "bool",
            "value": "text",
            "tag?=var": "enum|values([\"var\",\"input\",\"const\",\"const:encoded\",\"auth\",\"response\"])",
            "filters[]": "mvp_filter"
         },
         "schema2": [
            {
               "name": "enabled",
               "nullable": false,
               "required": false,
               "default": false,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "bool"
            },
            {
               "name": "value",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "text"
            },
            {
               "name": "tag",
               "nullable": false,
               "required": false,
               "default": "var",
               "style": {
                  "type": "single",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [
                  {
                     "name": "values",
                     "arg": [["var", "input", "const", "const:encoded", "auth", "response"]]
                  }
               ],
               "children": [],
               "type": "enum"
            },
            {
               "name": "filters",
               "nullable": false,
               "required": true,
               "default": null,
               "style": {
                  "type": "list",
                  "min": null,
                  "max": null
               },
               "op": "=",
               "methods": [],
               "children": [],
               "type": "mvp_filter"
            }
         ],
         "default": {},
         "methods": []
      }
   ],
   "pipe": [
      {
         "name": "abs",
         "display": "abs",
         "description": "Returns the absolute value",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["zzz", "abs", "absolute", "math.abs", "fabs", "absval"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "acos",
         "display": "acos",
         "description": "Calculates the arc cosine of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["acos", "math.acos", "system.math.acos", "math::acos", "acosd"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "acosh",
         "display": "acosh",
         "description": "Calculates the inverse hyperbolic cosine of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["acosh", "math.acosh", "numpy.arccosh", "math.cosh", "acos"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "add",
         "display": "add",
         "description": "Add 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["add", "plus", "sum", "addition", "concat"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "decimal",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "epochms_add_ms",
         "display": "add_ms_to_timestamp",
         "description": "Add milliseconds to a timestamp. (negative values are ok)",
         "doc": "",
         "group": "timestamp",
         "access": "",
         "tags": ["date_add", "addmilliseconds", "datetime_add", "strtotime", "adddays"],
         "variadic": false,
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "milliseconds",
               "description": "",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_add_secs",
         "display": "add_secs_to_timestamp",
         "description": "Add seconds to a timestamp. (negative values are ok)",
         "doc": "",
         "group": "timestamp",
         "access": "",
         "tags": ["strtotime", "seconds", "timedelta", "dateadd", "addseconds"],
         "variadic": false,
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "seconds",
               "description": "",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "addslashes",
         "display": "addslashes",
         "description": "Adds a backslash to the following characters: single quote, double quote, backslash, and null character.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["addslashes", "escape", "quote", "backslash", "nullify"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "append",
         "display": "append",
         "description": "Push an element on to the end of an array within an object and return the updated object",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["push", "append", "add", "insert", "extend"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            },
            {
               "name": "path",
               "description": "an optional path into an object",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "max",
         "display": "array_max",
         "description": "Returns the max of the values of the array",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["max", "maximum", "array_max", "max_value", "max_element"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "min",
         "display": "array_min",
         "description": "Returns the min of the values of the array",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["min", "minvalue", "minimum", "array_min", "lowest"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "asin",
         "display": "asin",
         "description": "Calculates the arc sine of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["asin", "arcsin", "math.asin", "math.arcsin", "asinradians"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "asinh",
         "display": "asinh",
         "description": "Calculates the inverse hyperbolic sine of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["asinh", "asinhf", "math.asinh", "asinh", "asinh"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "atan",
         "display": "atan",
         "description": "Calculates the arc tangent of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["atan", "atan2", "math.atan", "math.atan2", "atn"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "atanh",
         "display": "atanh",
         "description": "Calculates the inverse hyperbolic tangent of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["atanh", "math", "hyperbolic", "tangent", "inverse"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "avg",
         "display": "avg",
         "description": "Returns the average of the values of the array",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["average"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "base64_decode",
         "display": "base64_decode",
         "description": "Decodes the value represented as base64 text and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["base64decode", "atob", "frombase64string", "decode", "unbase64"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "base64_decode_urlsafe",
         "display": "base64_decode_urlsafe",
         "description": "Decodes the value represented as base64 urlsafe text and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["base64decode", "atob", "frombase64string", "decode", "unquote"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "base64_encode",
         "display": "base64_encode",
         "description": "Encodes the value and returns the result as base64 text",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["base64_encode", "btoa", "tobase64string", "encode", "convert.tobase64string"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "base64_encode_urlsafe",
         "display": "base64_encode_urlsafe",
         "description": "Encodes the value and returns the result as base64 urlsafe text",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["urlencode", "base64encode", "btoa", "base64", "encode"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "base_convert",
         "display": "base_convert",
         "description": "Converts a value between two bases",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["base_convert", "int", "parseint", "convert", "str"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "from_base",
               "description": "the base of the original value",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            },
            {
               "name": "to_base",
               "description": "the base of the new converted value",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "bin2hex",
         "display": "bin2hex",
         "description": "Converts a binary value into its hex equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["bin2hex", "buffer", "inttohex", "bitconverter", "convert"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "bindec",
         "display": "bindec",
         "description": "Converts a binary string (i.e. 01010) into its decimal equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["bindec", "parseInt", "int", "convert.toint32", "cast"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "bitwise_and",
         "display": "bitwise_and",
         "description": "Bitwise AND 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["bitwise_and", "bitand", "and", "band", "bitwiseand"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "bitwise_not",
         "display": "bitwise_not",
         "description": "Returns the existing value with its bits flipped",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["bitwise_not", "bitnot", "~", "bitwise_not_operator", "bitwise_complement"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "bitwise_or",
         "display": "bitwise_or",
         "description": "Bitwise OR 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["bitwise_or", "bitor", "or", "pipe", "vertical_bar"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "bitwise_xor",
         "display": "bitwise_xor",
         "description": "Bitwise XOR 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["bitwise_xor", "bitxor", "xor", "^", "exclusiveor"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "capitalize",
         "display": "capitalize",
         "description": "Converts the first letter of each word to a capital letter",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["ucwords", "tostring", "title", "initcap", "capitalize"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "ceil",
         "display": "ceil",
         "description": "Round a decimal up to its integer equivalent",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["ceil", "math.ceil", "ceiling", "roundup", "math.round"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "concat",
         "display": "concat",
         "description": "Concatenates two values together",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["concat", "concatenate", "join", "plus", "add"],
         "variadic": false,
         "entry": {
            "type": ["text", "int", "decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "the text being concatenated",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "sep",
               "description": "an optional separator between both text strings",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "contains",
         "display": "contains",
         "description": "Returns whether or not the expression is found",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["includes", "strpos", "indexof", "find", "like"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "convert_encoding",
         "display": "convert_encoding",
         "description": "Convert the character encoding of the supplied text",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["iconv", "decodeuri", "encodeuri", "codecs", "cast"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "to",
               "description": "the resulting character encoding",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "from",
               "description": "the current character encoding of the supplied text. This is commonly identified by the result of <b>detect_encoding</b>.",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "cos",
         "display": "cos",
         "description": "Calculates the cosine of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["cos", "math.cos", "system.math.cos", "math::cos", "cosine"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "count",
         "display": "count",
         "description": "Return the number of items in an object/array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["count", "length", "sizeof", "len", "count(*)"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "create_object",
         "display": "create_object",
         "description": "Creates an object based on a list of keys and a list of values",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["array_combine", "object.assign", "object.fromentries", "dict", "createobject"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "values",
               "description": "a list of values",
               "hint": "",
               "default": [],
               "type": "<T>[]",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "create_object_from_entries",
         "display": "create_object_from_entries",
         "description": "Creates an object based on an array of key/value pairs. (i.e. same result as the entries filter)",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["array_combine", "objectfromentries", "fromentries", "dict", "associative_array"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "uid",
         "display": "create_uid",
         "description": "Returns a unique 64bit unsigned int value seeded off the value",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["uniqueidentifier", "rand", "random", "uuid", "identity"],
         "variadic": false,
         "entry": {
            "type": ["text", "int"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "csv_create",
         "display": "csv_create",
         "description": "Creates a CSV format data stream from a list of column names and their corresponding data rows.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["fputcsv", "array_to_csv", "write", "export", "to_csv"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "rows",
               "description": "your rows of data",
               "hint": "",
               "default": "",
               "type": "text[]",
               "values": []
            },
            {
               "name": "separator",
               "description": "the field deliminator - one character only (i.e. a comma)",
               "hint": "",
               "default": ",",
               "type": "text",
               "values": []
            },
            {
               "name": "enclosure",
               "description": "the field enclosure - one character only (i.e. a quotation mark)",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            },
            {
               "name": "escape",
               "description": "the escape value - used to allow using the enclosure field within the field",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "csv_decode",
         "display": "csv_decode",
         "description": "Decodes the value represented in the CSV format and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["csvreader", "readcsv", "loadtxt", "readall", "opencsv"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "separator",
               "description": "the field deliminator - one character only (i.e. a comma)",
               "hint": "",
               "default": ",",
               "type": "text",
               "values": []
            },
            {
               "name": "enclosure",
               "description": "the field enclosure - one character only (i.e. a quotation mark)",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            },
            {
               "name": "escape",
               "description": "the escape value - used to allow using the enclosure field within the field",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "csv_encode",
         "display": "csv_encode",
         "description": "Encodes the value and returns the result in CSV format",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["csv_encode", "fputcsv", "write", "to_csv", "export"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "separator",
               "description": "the field deliminator - one character only (i.e. a comma)",
               "hint": "",
               "default": ",",
               "type": "text",
               "values": []
            },
            {
               "name": "enclosure",
               "description": "the field enclosure - one character only (i.e. a quotation mark)",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            },
            {
               "name": "escape",
               "description": "the escape value - used to allow using the enclosure field within the field",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "csv_parse",
         "display": "csv_parse",
         "description": "Parse the contents of a CSV file and conver it into an array of objects.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["csvreader", "readcsv", "loadtxt", "readall", "opencsv"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "separator",
               "description": "the field deliminator - one character only (i.e. a comma)",
               "hint": "",
               "default": ",",
               "type": "text",
               "values": []
            },
            {
               "name": "enclosure",
               "description": "the field enclosure - one character only (i.e. a quotation mark)",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            },
            {
               "name": "escape",
               "description": "the escape value - used to allow using the enclosure field within the field",
               "hint": "",
               "default": "\"",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "decbin",
         "display": "decbin",
         "description": "Converts a decimal value into its binary string (i.e. 01010) equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["decbin", "toString", "bin", "convert.tobinarystring", "cast"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "dechex",
         "display": "dechex",
         "description": "Converts a decimal value into its hex equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["dechex", "tostring", "hex", "inttohex", "decimaltohex"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "decoct",
         "display": "decoct",
         "description": "Converts a decimal value into its octal equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["decoct", "decoct", "oct", "convert.toint32", "cast"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "decrypt",
         "display": "decrypt",
         "description": "Decrypts the value and returns the result.",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["decrypt", "unscramble", "decode", "decipher", "unencrypt"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "algorithm",
               "description": "the algorithm used for decryption",
               "hint": "",
               "default": "aes-128-cbc",
               "type": "enum",
               "values": [
                  "aes-128-cbc",
                  "aes-192-cbc",
                  "aes-256-cbc",
                  "aes-128-gcm",
                  "aes-192-gcm",
                  "aes-256-gcm"
               ]
            },
            {
               "name": "key",
               "description": "the key used for decryption",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "iv",
               "description": "the initialization vector",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "deg2rad",
         "display": "deg2rad",
         "description": "Convert degrees to radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["math", "deg2rad", "radians", "degrees", "conversion", "math"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "detect_encoding",
         "display": "detect_encoding",
         "description": "Detect the character encoding of the supplied text",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": [
            "detect_encoding",
            "encoding",
            "charset_detect",
            "encoding_detect",
            "detectcharset"
         ],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "encodings",
               "description": "optional - leave blank to auto-detect or include a comma seperated list of encodings",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "array_diff",
         "display": "diff",
         "description": "Return the entries from the first array that are not in the second array. Only values are used for matching.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["array_diff", "difference", "difference", "except", "subtract"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>[]",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "array_diff_assoc",
         "display": "diff_assoc",
         "description": "Return the entries from the first array that are not in the second array. Values and keys are used for matching.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["diff_assoc", "difference", "_difference", "except", "symmetric_difference"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>[]",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "div",
         "display": "divide",
         "description": "Divide 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["divide", "division", "/", "div", "divideby"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "decimal",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "encrypt",
         "display": "encrypt",
         "description": "Encrypts the value and returns the result in raw binary form.",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["encrypt", "hash", "md5", "sha1", "bcrypt"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "algorithm",
               "description": "the algorithm used for encryption",
               "hint": "",
               "default": "aes-128-cbc",
               "type": "enum",
               "values": [
                  "aes-128-cbc",
                  "aes-192-cbc",
                  "aes-256-cbc",
                  "aes-128-gcm",
                  "aes-192-gcm",
                  "aes-256-gcm"
               ]
            },
            {
               "name": "key",
               "description": "the key used for encryption",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "iv",
               "description": "the initialization vector",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "ends_with",
         "display": "ends_with",
         "description": "Returns whether or not the expression is present at the end",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["endswith", "substring", "right", "substr", "slice"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "array_entries",
         "display": "entries",
         "description": "Get the property entries of an object/array as a numerically indexed array of key/value pairs.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["entries", "object", "array", "keyvalue", "pairs"],
         "variadic": false,
         "entry": {
            "type": ["obj", "json"]
         },
         "arg": [],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "eq",
         "display": "equals",
         "description": "Returns a boolean if both values are equal",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["equals", "eq", "is", "==", "==="],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "escape",
         "display": "escape",
         "description": "Converts special characters into their escaped variants. Ex: \t for tabs and \n for newlines.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["addslashes", "escape", "string_escape", "encode", "htmlspecialchars"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "even",
         "display": "even",
         "description": "Returns whether or not the value is even",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["even", "modulus", "remainder", "iseven", "parity"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "every",
         "display": "every",
         "description": "Higher order filter using a Lambda to determine if all elements evaluate as true in the code block.",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript/higher-order-filters#every",
         "group": "array",
         "access": "lambda",
         "tags": ["every", "all", "array.every", "all?", "forall"],
         "variadic": false,
         "entry": {
            "type": ["any[]"]
         },
         "arg": [
            {
               "name": "code",
               "description": "return true the element is found",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "exp",
         "display": "exp",
         "description": "Returns the exponent of mathematical expression \"e\"",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["exp", "math.exp", "expm1", "pow", "exp2"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "array_fill",
         "display": "fill",
         "description": "Create an array of a certain size with a default value.",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["array_fill", "fill", "full", "repeat", "pad"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "start",
               "description": "the starting index of the array.",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            },
            {
               "name": "count",
               "description": "the number of entries within the array.",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "array_fill_keys",
         "display": "fill_keys",
         "description": "Create an array of keys with a default value.",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": [
            "array_fill_keys",
            "fromentries",
            "objectfromentries",
            "dict.fromkeys",
            "fill_keys"
         ],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "keys",
               "description": "an array of keys.",
               "hint": "",
               "default": [],
               "type": "any[]",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "filter",
         "display": "filter",
         "description": "Higher order filter using a Lambda to create a new array with all elements that return true in the code block.",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript/higher-order-filters#filter",
         "group": "array",
         "access": "lambda",
         "tags": ["filter", "array_filter", "where", "select", "lambda"],
         "variadic": false,
         "entry": {
            "type": ["any[]"]
         },
         "arg": [
            {
               "name": "code",
               "description": "return true to keep the element",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "filter_empty",
         "display": "filter_empty",
         "description": "Returns a new array with only entries that are not empty (\"\", null, 0, \"0\", false, [], {})",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["array_filter", "filter", "compact", "where", "isnull"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "an optional path within an object - leave blank if just text or numbers",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "find",
         "display": "find",
         "description": "Higher order filter using a Lambda to find the first element that evaluates as true in the code block.",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript/higher-order-filters#find",
         "group": "array",
         "access": "lambda",
         "tags": ["find", "array_search", "indexof", "findindex", "select"],
         "variadic": false,
         "entry": {
            "type": ["any[]"]
         },
         "arg": [
            {
               "name": "code",
               "description": "return true the element is found",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "findIndex",
         "display": "findIndex",
         "description": "Higher order filter using a Lambda to find the numerical index of first element that evaluates as true in the code block.",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript/higher-order-filters#findindex",
         "group": "array",
         "access": "lambda",
         "tags": ["findindex", "array_search", "indexof", "find", "locate"],
         "variadic": false,
         "entry": {
            "type": ["any[]"]
         },
         "arg": [
            {
               "name": "code",
               "description": "return true the element is found",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "first",
         "display": "first",
         "description": "Get the first entry of an array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["first", "shift", "pop", "fetch", "select"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>"
         }
      },
      {
         "name": "first_notempty",
         "display": "first_notempty",
         "description": "Returns the first value that is not empty - i.e. not (\"\", null, 0, \"0\", false, [], {})",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["coalesce", "ifnull", "isnull", "nvl", "ternary"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "first_notnull",
         "display": "first_notnull",
         "description": "Returns the first value that is not null",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["coalesce", "ifnull", "isnull", "nvl", "choose"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "flatten",
         "display": "flatten",
         "description": "Flattens a multidimensional array into a single level array of values.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["flatten", "array_flatten", "flat", "concat_all", "merge"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "floor",
         "display": "floor",
         "description": "Round a decimal down to its integer equivalent",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["floor", "math.floor", "math.truncate", "truncate", "round"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "epochms_date",
         "display": "format_timestamp",
         "description": "Converts a timestamp into a human readable formatted date based on the supplied format",
         "doc": "",
         "group": "timestamp",
         "access": "",
         "tags": ["date", "strftime", "date", "todatetime", "convert"],
         "variadic": false,
         "entry": {
            "type": ["int", "text", "epochms"]
         },
         "arg": [
            {
               "name": "format",
               "description": "the format of the resulting date text",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "from_utf8",
         "display": "from_utf8",
         "description": "Convert the supplied text from UTF-8 to its binary form (ISO-8859-1).",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["from_utf8", "iconv", "decode", "utf8_decode", "charset"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "get",
         "display": "get",
         "description": "Returns the value of an object at the specified path",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": [null, "select", "fetch", "retrieve", "query"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "default",
               "description": "the default is used if no value is found at the path",
               "hint": "",
               "default": null,
               "type": "json",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "gt",
         "display": "greater_than",
         "description": "Returns a boolean if the left value is greater than the right value",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["gt", "greater", "morethan", "comparison", "conditional"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "gte",
         "display": "greater_than_or_equal",
         "description": "Returns a boolean if the left value is greater than or equal to the right value",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["gte", "ge", "greater_equal", "compare", "comparison"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "has",
         "display": "has",
         "description": "Returns the existence of whether or not something is present in the object at the specified path",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["isset", "hasownproperty", "in", "contains", "exists"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "hex2bin",
         "display": "hex2bin",
         "description": "Converts a hex value into its binary equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["hex2bin", "bin2hex", "hexdec", "dechex", "unpack"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "hexdec",
         "display": "hexdec",
         "description": "Converts a hex value into its decimal equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["hexdec", "parseint", "int", "convert.toint32", "cast"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "hmac_md5",
         "display": "hmac_md5",
         "description": "Returns a MD5 signature representation of the value using a shared secret via the HMAC method",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hmac", "md5", "signature", "hash", "encryption"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "The shared secret",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "hmac_sha1",
         "display": "hmac_sha1",
         "description": "Returns a SHA1 signature representation of the value using a shared secret via the HMAC method",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hmac", "sha1", "signature", "hash", "encryption"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "The shared secret",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "hmac_sha256",
         "display": "hmac_sha256",
         "description": "Returns a SHA256 signature representation of the value using a shared secret via the HMAC method",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hmac", "sha256", "signature", "hash", "encryption"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "The shared secret",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "hmac_sha384",
         "display": "hmac_sha384",
         "description": "Returns a SHA384 signature representation of the value using a shared secret via the HMAC method",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hmac", "sha384", "signature", "hash", "encryption"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "The shared secret",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "hmac_sha512",
         "display": "hmac_sha512",
         "description": "Returns a SHA512 signature representation of the value using a shared secret via the HMAC method",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hmac", "sha512", "signature", "hash", "encryption"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "The shared secret",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "icontains",
         "display": "icontains",
         "description": "Returns whether or not the case-insensitive expression is found",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["stristr", "indexof", "find", "contains", "like"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "iends_with",
         "display": "iends_with",
         "description": "Returns whether or not the case-insensitive expression is present at the end",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["endswith", "substr", "substring", "right", "like"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "stripos",
         "display": "iindex",
         "description": "Returns the index of the case-insensitive expression or false if it can't be found",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["indexof", "find", "strpos", "locate", "index"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "in",
         "display": "in",
         "description": "Returns whether or not the value is in the array",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["in_array", "includes", "contains", "indexof", "find"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "search",
               "description": "The searched value",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "strpos",
         "display": "index",
         "description": "Returns the index of the case-sensitive expression or false if it can't be found",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["indexof", "find", "strpos", "locate", "index"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "index_by",
         "display": "index_by",
         "description": "Create a new array indexed off of the value of each item's path",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": [],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "array_intersect",
         "display": "intersect",
         "description": "Return the entries from the first array that are also present in the second array. Only values are used for matching.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["intersect", "intersection", "intersect_all", "array_intersect", "inner_join"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>[]",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "array_intersect_assoc",
         "display": "intersect_assoc",
         "description": "Return the entries from the first array that are also present in the second array. Values and keys are used for matching.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": [
            "intersect_assoc",
            "array_intersect_assoc",
            "intersection",
            "associative",
            "matching"
         ],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>[]",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "is_array",
         "display": "is_array",
         "description": "Returns whether or not the value is a numerical indexed array.",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["is_array", "array", "list", "sequence", "collection"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "is_bool",
         "display": "is_bool",
         "description": "Returns whether or not the value is a boolean.",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["is_bool", "typeof", "bool", "boolean", "isboolean"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "is_decimal",
         "display": "is_decimal",
         "description": "Returns whether or not the value is a decimal value.",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["is_float", "isdecimal", "isnumeric", "is_finite", "isreal"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "empty",
         "display": "is_empty",
         "description": "Returns whether or not the value is empty (\"\", null, 0, \"0\", false, [], {})",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["isempty", "is_null", "empty", "isnone", "isnullorempty"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "is_int",
         "display": "is_int",
         "description": "Returns whether or not the value is an integer.",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["is_int", "isinteger", "isnumeric", "isint", "number.isinteger"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "null",
         "display": "is_null",
         "description": "Returns whether or not the value is null",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["is_null", "null", "none", "isnone", "isnull"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "is_object",
         "display": "is_object",
         "description": "Returns whether or not the value is an object.",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["is_object", "typeof", "instanceof", "type", "type"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "is_text",
         "display": "is_text",
         "description": "Returns whether or not the value is text.",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["is_string", "typeof", "isinstance", "sql_variant_property", "type"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "istarts_with",
         "display": "istarts_with",
         "description": "Returns whether or not the case-insensitive expression is present at the beginning",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["startswith", "substring", "like", "indexof", "startswith"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "join",
         "display": "join",
         "description": "Joins an array into a text string via the separator and returns the result",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["join", "implode", "concat_ws", "string.join", "string.concat"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "separator",
               "description": "the value used for joining the text array",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "json_decode",
         "display": "json_decode",
         "description": "Decodes the value represented as json and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["json_decode", "parse", "loads", "deserialize", "readtree"],
         "variadic": false,
         "entry": {
            "type": ["text", "int", "decimal", "bool"]
         },
         "arg": [],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "json_encode",
         "display": "json_encode",
         "description": "Encodes the value and returns the result as json text",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["json_encode", "stringify", "dumps", "json", "serialize"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "crypto_jwe_decode",
         "display": "jwe_decode",
         "description": "Decodes the JWE token and return the result",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["decode", "jwe", "token", "result", "return"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "check_claims",
               "description": "optional; claims to enforce",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "key",
               "description": "the key used for decrypting the key used for content decryption",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "key_algorithm",
               "description": "the algorithm used for encrypting the key",
               "hint": "",
               "default": "A256KW",
               "type": "enum",
               "values": [
                  "A128KW",
                  "A192KW",
                  "A256KW",
                  "A128GCMKW",
                  "A192GCMKW",
                  "A256GCMKW",
                  "ECDH-ES+A128KW",
                  "ECDH-ES+A192KW",
                  "ECDH-ES+A256KW"
               ]
            },
            {
               "name": "content_algorithm",
               "description": "the algorithm used for encrypting the content",
               "hint": "",
               "default": "A256CBC-HS512",
               "type": "enum",
               "values": [
                  "A128GCM",
                  "A192GCM",
                  "A256GCM",
                  "A128CBC-HS256",
                  "A192CBC-HS384",
                  "A256CBC-HS512"
               ]
            },
            {
               "name": "timeDrift",
               "description": "optional; if this token is time sensitive, then you can specify an allowable amount of time drift to be more tollerant of clocks not fully synchronized between servers.",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "json"
         }
      },
      {
         "name": "crypto_jwe_encode",
         "display": "jwe_encode",
         "description": "Encodes the value and return the result as a JWE token",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["jwe_encode", "encode", "token", "jwe", "encryption"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "headers",
               "description": "optional; headers to include in the JWS token",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "key",
               "description": "the key used for encrypting the JWE token",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "key_algorithm",
               "description": "the algorithm used for encrypting the key used for content encyption",
               "hint": "",
               "default": "A256KW",
               "type": "enum",
               "values": [
                  "A128KW",
                  "A192KW",
                  "A256KW",
                  "A128GCMKW",
                  "A192GCMKW",
                  "A256GCMKW",
                  "ECDH-ES+A128KW",
                  "ECDH-ES+A192KW",
                  "ECDH-ES+A256KW"
               ]
            },
            {
               "name": "content_algorithm",
               "description": "the algorithm used for encrypting the content",
               "hint": "",
               "default": "A256CBC-HS512",
               "type": "enum",
               "values": [
                  "A128GCM",
                  "A192GCM",
                  "A256GCM",
                  "A128CBC-HS256",
                  "A192CBC-HS384",
                  "A256CBC-HS512"
               ]
            },
            {
               "name": "ttl",
               "description": "optional; the amount of time in seconds this token is valid - use 0 for no expiration.",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "crypto_jws_decode",
         "display": "jws_decode",
         "description": "Decodes the JWS token and return the result",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["decode", "jws", "token", "result", "authentication"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "check_claims",
               "description": "optional; claims to enforce",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "key",
               "description": "the key used for verifying the authenticity of the JWS token",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "algorithm",
               "description": "the algorithm used for calculating the signature",
               "hint": "",
               "default": "HS256",
               "type": "enum",
               "values": [
                  "PS256",
                  "PS384",
                  "PS512",
                  "RS256",
                  "RS384",
                  "RS512",
                  "HS256",
                  "HS384",
                  "HS512",
                  "ES256",
                  "ES384",
                  "ES512"
               ]
            },
            {
               "name": "timeDrift",
               "description": "optional; if this token is time sensitive, then you can specify an allowable amount of time drift to be more tollerant of clocks not fully synchronized between servers.",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "json"
         }
      },
      {
         "name": "crypto_jws_encode",
         "display": "jws_encode",
         "description": "Encodes the value and return the result as a JWS token",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["jws_encode", "jwt_encode", "encode", "tokenize", "signature"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "headers",
               "description": "optional; headers to include in the JWS token",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "key",
               "description": "the key used for signing the JWS token",
               "hint": "",
               "default": "",
               "type": "json",
               "values": []
            },
            {
               "name": "algorithm",
               "description": "the algorithm used for calculating the signature",
               "hint": "",
               "default": "HS256",
               "type": "enum",
               "values": [
                  "PS256",
                  "PS384",
                  "PS512",
                  "RS256",
                  "RS384",
                  "RS512",
                  "HS256",
                  "HS384",
                  "HS512",
                  "ES256",
                  "ES384",
                  "ES512"
               ]
            },
            {
               "name": "ttl",
               "description": "optional; the amount of time in seconds this token is valid - use 0 for no expiration.",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "array_keys",
         "display": "keys",
         "description": "Get the property keys of an object/array as a numerically indexed array.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["keys", "_object_vars", "object.keys", "dir", "columns"],
         "variadic": false,
         "entry": {
            "type": ["obj", "json"]
         },
         "arg": [],
         "result": {
            "type": "text[]"
         }
      },
      {
         "name": "lambda",
         "display": "lambda",
         "description": "Business logic using JavaScript.",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript#filter",
         "group": "transform",
         "access": "lambda",
         "tags": ["function", "method", "procedure", "routine", "subroutine"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "code",
               "description": "return the new result",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "last",
         "display": "last",
         "description": "Get the last entry of an array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["end", "pop", "last", "slice", "tail"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>"
         }
      },
      {
         "name": "lt",
         "display": "less_than",
         "description": "Returns a boolean if the left value is less than the right value",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["lt", "less", "compare", "<", "smaller"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "lte",
         "display": "less_than_or_equal",
         "description": "Returns a boolean if the left value is less than or equal to the right value",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["lte", "le", "<=", "compare", "comparison"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "list_encodings",
         "display": "list_encodings",
         "description": "List support character encodings",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["iconv", "decode", "encode", "charset", "collation"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [],
         "result": {
            "type": "text[]"
         }
      },
      {
         "name": "ln",
         "display": "ln",
         "description": "Returns the natural logarithm",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["log", "math.log", "log10", "log2", "log1p"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "log",
         "display": "log",
         "description": "Returns the logarithm with a custom base",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["log", "math.log", "log10", "log2", "log1p"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "base",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "log10",
         "display": "log10",
         "description": "Returns the Base-10 logarithm",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["log10", "math.log10", "log", "math.log", "log10f"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "ltrim",
         "display": "ltrim",
         "description": "Trim whitespace or other characters from the left side and return the result",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["ltrim", "trimstart", "strip", "lstrip", "trimleft"],
         "variadic": false,
         "entry": {
            "type": ["text", "text[]"]
         },
         "arg": [
            {
               "name": "mask",
               "description": "optional - include a list of characters to trim or leave blank to trim whitespace",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "map",
         "display": "map",
         "description": "Higher order filter using a Lambda to transform the elements of an array into a different format.",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript/higher-order-filters#map",
         "group": "array",
         "access": "lambda",
         "tags": ["map", "transform", "array", "lambda", "filter"],
         "variadic": false,
         "entry": {
            "type": ["any[]"]
         },
         "arg": [
            {
               "name": "code",
               "description": "return the replacement value",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "num_max",
         "display": "max",
         "description": "Returns the max both values",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["max", "maximum", "math.max", "max_value", "maxval"],
         "variadic": false,
         "entry": {
            "type": ["int", "decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "md5",
         "display": "md5",
         "description": "Returns a MD5 signature representation of the value",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["md5", "hash", "crypto", "checksum", "security"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "array_merge",
         "display": "merge",
         "description": "Merge the first level of elements of both arrays together and return the new array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["merge", "concat", "extend", "union", "append"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>[]",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "array_merge_recursive",
         "display": "merge_recursive",
         "description": "Merge the elements from all levels of both arrays together and return the new array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["merge", "concatenate", "union", "extend", "append"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>[]",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "num_min",
         "display": "min",
         "description": "Returns the min both values",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["min", "minimum", "math.min", "min_value", "minval"],
         "variadic": false,
         "entry": {
            "type": ["int", "decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "mod",
         "display": "modulus",
         "description": "Modulus 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["modulus", "remainder", "modulo", "mod", "%"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "mul",
         "display": "multiply",
         "description": "Multiply 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["multiply", "product", "*", "mul", "times"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "decimal",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "not",
         "display": "not",
         "description": "Returns the opposite of the existing value evaluated as a boolean",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["not", "negate", "invert", "complement", "bitwise_not"],
         "variadic": false,
         "entry": {
            "type": ["bool"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "ne",
         "display": "not_equals",
         "description": "Returns a boolean if both values are not equal",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["noteq", "compare", "inequality", "not_equal", "comparison"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "number_format",
         "display": "number_format",
         "description": "Format a number with flexible support over decimal places, thousands separator, and decimal separator.",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["number_format", "format", "round", "tofixed", "printf"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "decimals",
               "description": "The number of decimal digits",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            },
            {
               "name": "decimal_separator",
               "description": "The separator value used for the decimal point",
               "hint": "",
               "default": ".",
               "type": "text",
               "values": []
            },
            {
               "name": "thousands_separator",
               "description": "The separator value used for grouping each set of thousands.",
               "hint": "",
               "default": ",",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "string"
         }
      },
      {
         "name": "octdec",
         "display": "octdec",
         "description": "Converts an octal value into its decimal equivalent",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["octdec", "int", "parseint", "convert.toint32", "cast"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "odd",
         "display": "odd",
         "description": "Returns whether or not the value is odd",
         "doc": "",
         "group": "comparison",
         "access": "",
         "tags": ["odd", "modulus", "remainder", "modulo", "iseven"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "epochms_from_format",
         "display": "parse_timestamp",
         "description": "Parse a timestamp from a flexible format.",
         "doc": "",
         "group": "timestamp",
         "access": "",
         "tags": ["strtotime", "date.parse", "datetime.strptime", "sqlconvert", "parse"],
         "variadic": false,
         "entry": {
            "type": ["int", "text", "epochms"]
         },
         "arg": [
            {
               "name": "format",
               "description": "the format of the timestamp",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "pick",
         "display": "pick",
         "description": "Pick keys from the object to create a new object of just those keys.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": [],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "keys",
               "description": "comma seperated list of keys",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "<T>"
         }
      },
      {
         "name": "array_pop",
         "display": "pop",
         "description": "Pops the last element of the array off and returns it",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["pop", "array_pop", "remove", "delete", "end"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>"
         }
      },
      {
         "name": "pow",
         "display": "pow",
         "description": "Returns the value raised to the power of exp.",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["pow", "power", "math.pow", "exp", "sqrt"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "exp",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "prepend",
         "display": "prepend",
         "description": "Push an element on to the beginning of an array within an object and return the updated object",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["unshift", "array_unshift", "insert", "prepend", "push_front"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            },
            {
               "name": "path",
               "description": "an optional path into an object",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "product",
         "display": "product",
         "description": "Returns the product of the values of the array",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["product", "multiply", "reduce", "prod", "aggregate"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "array_push",
         "display": "push",
         "description": "Push an element on to the end of an array and return the new array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["array_push", "push", "append", "add", "insert"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "querystring_parse",
         "display": "querystring_parse",
         "description": "Parses a query string from a URL into its individual key-value pairs.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["parse_str", "urlsearchparams", "urlparse", "sqlparse", "querystring"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "json"
         }
      },
      {
         "name": "rad2deg",
         "display": "rad2deg",
         "description": "Convert radians to degrees",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["rad2deg", "degrees", "radians", "conversion", "math"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "range",
         "display": "range",
         "description": "Returns array of values between the specified start/stop.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["range", "sequence", "array", "loop", "generate"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "start",
               "description": "the start of the range sequence",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            },
            {
               "name": "stop",
               "description": "the end of the range sequence",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "int[]"
         }
      },
      {
         "name": "reduce",
         "display": "reduce",
         "description": "Higher order filter using a Lambda to convert an array into a single value. (i.e. the sum of all elements)",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript/higher-order-filters#reduce",
         "group": "array",
         "access": "lambda",
         "tags": ["reduce", "array_reduce", "aggregate", "sum", "foldl"],
         "variadic": false,
         "entry": {
            "type": ["any[]"]
         },
         "arg": [
            {
               "name": "initial_value",
               "description": "The initial value to start with for the first value of $result.",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            },
            {
               "name": "code",
               "description": "return the new result",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "regex_match_all",
         "display": "regex_get_all_matches",
         "description": "Return all matches performed by a regular expression on the supplied subject text.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["preg_match_all", "match", "findall", "regex", "matches"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "subject",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text[]"
         }
      },
      {
         "name": "regex_match",
         "display": "regex_get_first_match",
         "description": "Return the first set of matches performed by a regular expression on the supplied subject text.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["match", "regex", "search", "find", "pattern"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "subject",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text[]"
         }
      },
      {
         "name": "regex_test",
         "display": "regex_matches",
         "description": "Tests if a regular expression matches the supplied subject text.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["match", "regex", "test", "search", "pattern"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "subject",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "regex_quote",
         "display": "regex_quote",
         "description": "Update the supplied text value to be properly escaped for regular expressions.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["escape", "regex", "pattern", "string", "update"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "delimiter",
               "description": "An optional delimiter character to escape.",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "regex_replace",
         "display": "regex_replace",
         "description": "Perform a regular expression search and replace on the supplied subject text.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["replace", "sub", "re.sub", "string.replace", "regexp_replace"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "replacement",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "subject",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "array_remove",
         "display": "remove",
         "description": "Remove any elements from the array that match the supplied value and then return the new array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["array_diff", "filter", "remove", "distinct", "delete"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            },
            {
               "name": "path",
               "description": "an optional path into an object",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "strict",
               "description": "enforce strict type matching (100 vs \"100\")",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "string_replace",
         "display": "replace",
         "description": "Replace a text phrase with another",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["replace", "str_replace", "replaceall", "string.replace", "re.sub"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "the text being replaced",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "replacement",
               "description": "the replacement text",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "reverse",
         "display": "reverse",
         "description": "Returns values of an array in reverse order",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["reverse", "array_reverse", "reverse_array", "flip", "invert"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "round",
         "display": "round",
         "description": "Round a decimal with optional precision",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["round", "math.round", "decimal.round", "round()", "round"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "precision",
               "description": "the number of decimal digits to round to",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "rtrim",
         "display": "rtrim",
         "description": "Trim whitespace or other characters from the right return the result",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["rtrim", "trimend", "rstrip", "righttrim", "trimright"],
         "variadic": false,
         "entry": {
            "type": ["text", "text[]"]
         },
         "arg": [
            {
               "name": "mask",
               "description": "optional - include a list of characters to trim or leave blank to trim whitespace",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "safe_array",
         "display": "safe_array",
         "description": "Always returns an array. Uses the existing value if it is an array or creates an array of one element.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["array", "list", "tuple", "table", "collection"],
         "variadic": false,
         "entry": {
            "type": ["<T>", "<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "secureid_decode",
         "display": "secureid_decode",
         "description": "Returns the id of the original encode",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["decode", "unhash", "decrypt", "parse", "deserialize"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "salt",
               "description": "the salt of the original encode",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "secureid_encode",
         "display": "secureid_encode",
         "description": "Returns an encrypted version of the id",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["encrypt", "hash", "md5", "sha256", "bcrypt"],
         "variadic": false,
         "entry": {
            "type": ["int"]
         },
         "arg": [
            {
               "name": "salt",
               "description": "an optional salt",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "set",
         "display": "set",
         "description": "Sets a value at the path within the object and returns the updated object",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["value", "update", "modify", "assign", "alter"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "set_conditional",
         "display": "set_conditional",
         "description": "Sets a value at the path within the object and returns the updated object, if the conditional expression is true",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["value", "update", "conditional", "expression", "object"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            },
            {
               "name": "conditional",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "set_ifnotempty",
         "display": "set_ifnotempty",
         "description": "Sets a value (if it is not empty: \"\", null, 0, \"0\", false, [], {}) at the path within the object and returns the updated object",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["isset", "defined", "isnull", "coalesce", "ifnull"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "set_ifnotnull",
         "display": "set_ifnotnull",
         "description": "Sets a value (if it is not null) at the path within the object and returns the updated object",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["value", "update", "notnull", "isset", "coalesce"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "any",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "sha1",
         "display": "sha1",
         "description": "Returns a SHA1 signature representation of the value",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["sha1", "hash", "encryption", "signature", "security"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "sha256",
         "display": "sha256",
         "description": "Returns a SHA256 signature representation of the value",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hash", "sha256", "signature", "cryptography", "security"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "sha384",
         "display": "sha384",
         "description": "Returns a SHA384 signature representation of the value",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hash", "sha384", "signature", "cryptography", "security"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "sha512",
         "display": "sha512",
         "description": "Returns a SHA512 signature representation of the value",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["hash", "sha512", "signature", "cryptography", "security"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "raw",
               "description": "Unchecked will be a hex value. Checked will be a raw binary value.",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "array_shift",
         "display": "shift",
         "description": "Shifts the first element of the array off and returns it",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["shift", "array_shift", "pop", "remove", "dequeue"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>"
         }
      },
      {
         "name": "array_shuffle",
         "display": "shuffle",
         "description": "Shuffles the order of the entries in the array.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["shuffle", "random.shuffle", "rand", "order by rand", "randomize"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "sin",
         "display": "sin",
         "description": "Calculates the sine of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["sin", "math.sin", "system.math.sin", "math.sinh", "sinh"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "array_slice",
         "display": "slice",
         "description": "Extract a section from an array.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["slice", "array_slice", "substring", "substr", "mid"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "offset",
               "description": "The offset into the array",
               "hint": "",
               "default": 0,
               "type": "int",
               "values": []
            },
            {
               "name": "length",
               "description": "The length from the offset. Negative values start at the end.",
               "hint": "",
               "default": -1,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "some",
         "display": "some",
         "description": "Higher order filter using a Lambda to determine if at least one element evaluates as true in the code block.",
         "doc": "https://docs.xano.com/working-with-data/lambdas-javascript/higher-order-filters#some",
         "group": "array",
         "access": "lambda",
         "tags": ["some", "any", "exists", "filter", "lambda"],
         "variadic": false,
         "entry": {
            "type": ["any[]"]
         },
         "arg": [
            {
               "name": "code",
               "description": "return true the element is found",
               "hint": "script",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timeout",
               "description": "max lambda execution time",
               "hint": "",
               "default": 10,
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "fsort",
         "display": "sort",
         "description": "Sort an array of elements with an optional path inside the element",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["sort", "orderby", "array_sort", "sorted", "distinct"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "an optional path into an object",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "type",
               "description": "the sorting type - number, text, natural or case-insensitive versions - itext & inatural",
               "hint": "",
               "default": "itext",
               "type": "enum",
               "values": ["number", "text", "itext", "natural", "inatural"]
            },
            {
               "name": "asc",
               "description": "ascending or descending",
               "hint": "",
               "default": true,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "split",
         "display": "split",
         "description": "Splits text into an array of text and returns the result",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["split", "explode", "split_string", "string_split", "substring_index"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "separator",
               "description": "the value used for splitting the text",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text[]"
         }
      },
      {
         "name": "sprintf",
         "display": "sprintf",
         "description": "formats text with variable substitution",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["sprintf", "format", "printf", "string.format", "concat"],
         "variadic": true,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "sqrt",
         "display": "sqrt",
         "description": "Returns the square root of the value",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["sqrt", "math.sqrt", "sqrt()", "square_root", "sqrtf"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "starts_with",
         "display": "starts_with",
         "description": "Returns whether or not the expression is present at the beginning",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["startswith", "substring", "like", "indexof", "slice"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "search",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "strip_accents",
         "display": "strip_accents",
         "description": "Removes accents from characters",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["normalize", "unidecode", "iconv", "string.translate", "replace"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "strip_tags",
         "display": "strip_html",
         "description": "Removes HTML tags from a string",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["strip_tags", "replace", "regex", "sub", "replaceall"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "exclude",
               "description": "optional - exclude certain tags. i.e. <p><br><div>",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "strlen",
         "display": "strlen",
         "description": "Returns the number of characters",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["strlen", "length", "len", "count", "char_length"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "substr",
         "display": "substr",
         "description": "Extracts a section of text",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["substr", "substring", "slice", "mid", "substr"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "start",
               "description": "the starting position of text extraction. negative values start at the end.",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            },
            {
               "name": "length",
               "description": "optional - the length of the extraction. negative values will omit values from the end.",
               "hint": "",
               "default": "",
               "type": "int",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "sub",
         "display": "subtract",
         "description": "Subtract 2 values together and return the answer",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["subtract", "minus", "difference", "deduct", "decrement"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "decimal",
               "values": []
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "sum",
         "display": "sum",
         "description": "Returns the sum of the values of the array",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["sum", "reduce", "aggregate", "total", "add"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "tan",
         "display": "tan",
         "description": "Calculates the tangent of the supplied value in radians",
         "doc": "",
         "group": "math",
         "access": "",
         "tags": ["tan", "tangent", "math.tan", "system.math.tan", "tanr"],
         "variadic": false,
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "to_bool",
         "display": "to_bool",
         "description": "Converts text, integer, or decimal types to a bool and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["boolval", "boolean", "parsebool", "convert.toboolean", "cast"],
         "variadic": false,
         "entry": {
            "type": ["text", "int", "decimal"]
         },
         "arg": [],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "to_epoch_day",
         "display": "to_days",
         "description": "Converts a text expression (now, next friday, Jan 1 2000) to the number of days since the unix epoch.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": [
            "timestamp",
            "strtotime",
            "date.parse",
            "datetime.timestamp",
            "datediff",
            "unix_timestamp"
         ],
         "variadic": false,
         "entry": {
            "type": ["text", "int"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "to_decimal",
         "display": "to_decimal",
         "description": "Converts text, integer, or bool types to a decimal and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["floatval", "parsefloat", "decimal", "cast", "convert"],
         "variadic": false,
         "entry": {
            "type": ["text", "int", "bool"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "to_expr",
         "display": "to_expr",
         "description": "Converts text into an expression, processes it, and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["expression", "dynamic", "transform"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "to_epoch_hour",
         "display": "to_hours",
         "description": "Converts a text expression (now, next friday, Jan 1 2000) to the number of hours since the unix epoch.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["timestamp", "strtotime", "date.parse", "datetime.timestamp", "date", "datediff"],
         "variadic": false,
         "entry": {
            "type": ["text", "int"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "to_int",
         "display": "to_int",
         "description": "Converts text, decimal, or bool types to an integer and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["intval", "parseint", "int", "cast", "convert"],
         "variadic": false,
         "entry": {
            "type": ["text", "decimal", "bool"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "lower",
         "display": "to_lower",
         "description": "Converts all characters to lower case and returns the result",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["strtolower", "tolowercase", "lower", "lcase", "tolower"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "to_epoch_minute",
         "display": "to_minutes",
         "description": "Converts a text expression (now, next friday, Jan 1 2000) to the number of minutes since the unix epoch.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["timestamp", "strtotime", "date.parse", "datetime.timestamp", "date", "datediff"],
         "variadic": false,
         "entry": {
            "type": ["text", "int"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "to_epoch_ms",
         "display": "to_ms",
         "description": "Converts a text expression (now, next friday, Jan 1 2000) to the number of milliseconds since the unix epoch.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": [
            "timestamp",
            "strtotime",
            "date.parse",
            "datetime.timestamp",
            "timeofday",
            "datediff"
         ],
         "variadic": false,
         "entry": {
            "type": ["text", "int"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "to_epoch_sec",
         "display": "to_seconds",
         "description": "Converts a text expression (now, next friday, Jan 1 2000) to the number of seconds since the unix epoch.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": [
            "timestamp",
            "strtotime",
            "date.parse",
            "datetime.timestamp",
            "unix_timestamp",
            "time"
         ],
         "variadic": false,
         "entry": {
            "type": ["text", "int"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "to_text",
         "display": "to_text",
         "description": "Converts integer, decimal, or bool types to text and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["strval", "tostring", "str", "format", "concat"],
         "variadic": false,
         "entry": {
            "type": ["int", "decimal", "bool"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "to_epochms",
         "display": "to_timestamp",
         "description": "Converts a text expression (now, next friday, Jan 1 2000) to timestamp comparible format.",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["strtotime", "date.parse", "datetime.strptime", "sqlconvert", "parse"],
         "variadic": false,
         "entry": {
            "type": ["text", "int"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "upper",
         "display": "to_upper",
         "description": "Converts all characters to upper case and returns the result",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["strtoupper", "toupper", "touppercase", "upper", "ucase"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "to_utf8",
         "display": "to_utf8",
         "description": "Convert the supplied text from its binary form (ISO-8859-1) to UTF-8.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["iconv", "decode", "utf8_encode", "utf8_decode", "charset"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "transform",
         "display": "transform",
         "description": "Processes an expression with local data bound to the $this variable",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": [],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "expression",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "epochms_transform",
         "display": "transform_timestamp",
         "description": "Takes a timestamp and applies a relative transformation to it. Ex. -7 days, last Monday, first day of this month",
         "doc": "",
         "group": "timestamp",
         "access": "",
         "tags": ["strtotime", "date", "utcdate", "datetime", "dateadd"],
         "variadic": false,
         "entry": {
            "type": ["int", "text", "epochms"]
         },
         "arg": [
            {
               "name": "format",
               "description": "the format of the transformation",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "timezone",
               "description": "the timezone - E.g. UTC, America/Los_Angeles, Australia/Sydney",
               "hint": "",
               "default": "UTC",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "trim",
         "display": "trim",
         "description": "Trim whitespace or other characters from both sides and return the result",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["trim", "strip", "ltrim", "rtrim", "trimend"],
         "variadic": false,
         "entry": {
            "type": ["text", "text[]"]
         },
         "arg": [
            {
               "name": "mask",
               "description": "optional - include a list of characters to trim or leave blank to trim whitespace",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "unique",
         "display": "unique",
         "description": "Returns unique values of an array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["array_unique", null, "distinct", "filter", "unique"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "an optional path within an object - leave blank if just text or numbers",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "unpick",
         "display": "unpick",
         "description": "Remove keys from the object to create a new object of the remaining keys.",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": [],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "keys",
               "description": "comma seperated list of keys to exclude",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "<T>"
         }
      },
      {
         "name": "unset",
         "display": "unset",
         "description": "Removes a value at the path within the object and returns the updated object",
         "doc": "",
         "group": "manipulation",
         "access": "",
         "tags": ["delete", "remove", "pop", "discard", "unset"],
         "variadic": false,
         "entry": {
            "type": ["any", "any[]"]
         },
         "arg": [
            {
               "name": "path",
               "description": "",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "array_unshift",
         "display": "unshift",
         "description": "Push an element to the beginning of an array and return the new array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["unshift", "array_unshift", "insert", "prepend", "push_front"],
         "variadic": false,
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "hint": "",
               "default": "",
               "type": "<T>",
               "values": []
            }
         ],
         "result": {
            "type": "<T>[]"
         }
      },
      {
         "name": "url_addarg",
         "display": "url_addarg",
         "description": "Parses a URL and returns an updated version with an encoded version of the supplied argument",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["parse_url", "urlencode", "querystring", "urllib", "http_build_query"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "the argument key",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "value",
               "description": "the argument value",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "encoding_rfc3986",
               "description": "whether or not to use the RFC 3986 specification",
               "hint": "",
               "default": false,
               "type": "bool",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_decode",
         "display": "url_decode",
         "description": "Decodes the value represented as a url encoded value",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["urldecode", "decodeuri", "unquote", "httputility.urldecode", "urldecode"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_decode_rfc3986",
         "display": "url_decode_rfc3986",
         "description": "Decodes the value represented as a url encoded value using the RFC 3986 specification",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["urldecode", "decodeuri", "unquote", "webutility.urldecode", "urldecode"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_delarg",
         "display": "url_delarg",
         "description": "Parses a URL and returns an updated version with the supplied argument removed",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["parse_url", "urlsearchparams", "urlparse", "remove", "query"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "the argument key",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_encode",
         "display": "url_encode",
         "description": "Encodes the value and returns the result as a url encoded value",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["urlencode", "encodeuri", "quote", "escape", "httpserverutility.urlencode"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_encode_rfc3986",
         "display": "url_encode_rfc3986",
         "description": "Encodes the value and returns the result as a url encoded value using the RFC 3986 specification",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["urlencode", "encodeuri", "quote", "httputility.urlencode", "urllib.parse.quote"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_getarg",
         "display": "url_getarg",
         "description": "Gets the argument's value from a URL",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["parse_url", "urlsearchparams", "urlparse", "querystring", "split"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "the argument key",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            },
            {
               "name": "default",
               "description": "the default is used if no argument is found in the URL",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_hasarg",
         "display": "url_hasarg",
         "description": "Returns the existence of a argument in the URL",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["parse_url", "urlsearchparams", "querystring", "urllib", "sqlparameter"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "key",
               "description": "the argument key",
               "hint": "",
               "default": "",
               "type": "text",
               "values": []
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "url_parse",
         "display": "url_parse",
         "description": "Parses a URL into its individual components.",
         "doc": "",
         "group": "text",
         "access": "",
         "tags": ["parse_url", "urlsearchparams", "urlparse", "uri", "split"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "json"
         }
      },
      {
         "name": "uuid4",
         "display": "uuid",
         "description": "Returns a universally unique identifier",
         "doc": "",
         "group": "security",
         "access": "",
         "tags": ["guid", "uuid_generate", "uuid4", "newid", "randomuuid"],
         "variadic": false,
         "entry": {
            "type": ["any"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "array_values",
         "display": "values",
         "description": "Get the property values of an object/array as a numerically indexed array",
         "doc": "",
         "group": "array",
         "access": "",
         "tags": ["values", "_object_vars", "object_values", "values", "select"],
         "variadic": false,
         "entry": {
            "type": ["obj", "json"]
         },
         "arg": [],
         "result": {
            "type": "any[]"
         }
      },
      {
         "name": "xml_decode",
         "display": "xml_decode",
         "description": "Decodes XML and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["xml_decode", "simplexml_load_string", "parsexml", "xmlparse", "xmlread"],
         "variadic": false,
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "any"
         }
      },
      {
         "name": "yaml_decode",
         "display": "yaml_decode",
         "description": "Decodes the value represented as yaml and returns the result",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["decode", "yaml", "parse", "deserialize", "value"],
         "variadic": false,
         "entry": {
            "type": ["text", "int", "decimal", "bool"]
         },
         "arg": [],
         "result": {
            "type": "obj"
         }
      },
      {
         "name": "yaml_encode",
         "display": "yaml_encode",
         "description": "Encodes the value and returns the result as yaml text",
         "doc": "",
         "group": "transform",
         "access": "",
         "tags": ["encode", "serialization", "yaml", "text", "value"],
         "variadic": false,
         "entry": {
            "type": ["<T>"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      }
   ],
   "filter": [
      {
         "name": "add",
         "display": "add",
         "description": "Adds 2 values together and returns the answer",
         "group": "math",
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "default": "",
               "type": "decimal"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "between_filter",
         "display": "between",
         "description": "Determines if a value is between 2 other values",
         "group": "comparison",
         "entry": {
            "type": ["int", "decimal", "epochms"]
         },
         "arg": [
            {
               "name": "left",
               "description": "",
               "default": "",
               "type": "any"
            },
            {
               "name": "right",
               "description": "",
               "default": "",
               "type": "any"
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "ceil",
         "display": "ceil",
         "description": "Round fractions up to their integer equivalent",
         "group": "math",
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "coalesce",
         "display": "coalesce",
         "description": "Provides an alternative value for null values",
         "group": "manipulation",
         "entry": {
            "type": ["<T>"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "default": "",
               "type": "<T>"
            }
         ],
         "result": {
            "type": "<T>"
         }
      },
      {
         "name": "concat",
         "display": "concat",
         "description": "Concatenates two values together",
         "group": "text",
         "entry": {
            "type": ["any"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "default": "",
               "type": "any"
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "vector_cos_distance",
         "display": "Cosine Distance",
         "description": "Provides the cosine distance between two vectors",
         "group": "vector",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [
            {
               "name": "vector",
               "description": "",
               "default": "",
               "type": "decimal[]"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "vector_cos_similarity",
         "display": "Cosine Similarity",
         "description": "Provides the cosine similarity between two vectors",
         "group": "vector",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [
            {
               "name": "vector",
               "description": "",
               "default": "",
               "type": "decimal[]"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "covers",
         "display": "covers",
         "description": "Determines if one geometry covers another",
         "group": "geo",
         "entry": {
            "type": [
               "geo_point",
               "geo_multipoint",
               "geo_linestring",
               "geo_multilinestring",
               "geo_polygon",
               "geo_multipolygon"
            ]
         },
         "arg": [
            {
               "name": "geometry",
               "description": "",
               "default": "",
               "type": "geo_point"
            }
         ],
         "result": {
            "type": "bool"
         }
      },
      {
         "name": "distance",
         "display": "distance",
         "description": "Provides the distance in meters between two geometries",
         "group": "geo",
         "entry": {
            "type": [
               "geo_point",
               "geo_multipoint",
               "geo_linestring",
               "geo_multilinestring",
               "geo_polygon",
               "geo_multipolygon"
            ]
         },
         "arg": [
            {
               "name": "geometry",
               "description": "",
               "default": "",
               "type": "geo_point"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "div",
         "display": "div",
         "description": "Divides 2 values together and returns the answer",
         "group": "math",
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "default": "",
               "type": "decimal"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "floor",
         "display": "floor",
         "description": "Round fractions down to their integer equivalent",
         "group": "math",
         "entry": {
            "type": ["decimal"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "vector_inner_product",
         "display": "Inner Product",
         "description": "Provides the inner product between two vectors",
         "group": "vector",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [
            {
               "name": "vector",
               "description": "",
               "default": "",
               "type": "decimal[]"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "vector_l1_distance",
         "display": "L1 Distance (Manhattan)",
         "description": "Provides the L1 distance between two vectors",
         "group": "vector",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [
            {
               "name": "vector",
               "description": "",
               "default": "",
               "type": "decimal[]"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "vector_l2_distance",
         "display": "L2 Distance (Euclidean)",
         "description": "Provides the L2 distance between two vectors",
         "group": "vector",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [
            {
               "name": "vector",
               "description": "",
               "default": "",
               "type": "decimal[]"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "array_length",
         "display": "length",
         "description": "Returns the number of items",
         "group": "array",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "mul",
         "display": "mul",
         "description": "Multiplies 2 values together and returns the answer",
         "group": "math",
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "default": "",
               "type": "decimal"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "vector_negative_inner_product",
         "display": "Negative Inner Product",
         "description": "Provides the negative inner product between two vectors",
         "group": "vector",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [
            {
               "name": "vector",
               "description": "",
               "default": "",
               "type": "decimal[]"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "round",
         "display": "round",
         "description": "Rounds the value to the specified precision",
         "group": "math",
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "precision",
               "description": "The number of decimal digits to round to",
               "default": 2,
               "type": "int"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "search_rank",
         "display": "search_rank",
         "description": "Calcuate a ranking value for the search match",
         "group": "search",
         "entry": {
            "type": ["search"]
         },
         "arg": [
            {
               "name": "text",
               "description": "the input being searched",
               "default": "",
               "type": "text"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "sub",
         "display": "sub",
         "description": "Subtracts 2 values together and returns the answer",
         "group": "math",
         "entry": {
            "type": ["decimal"]
         },
         "arg": [
            {
               "name": "value",
               "description": "",
               "default": "",
               "type": "decimal"
            }
         ],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "substr",
         "display": "substr",
         "description": "Extracts a section of text",
         "group": "text",
         "entry": {
            "type": ["text"]
         },
         "arg": [
            {
               "name": "start",
               "description": "the starting position of text extraction.",
               "default": "",
               "type": "int"
            },
            {
               "name": "length",
               "description": "the length of the extraction.",
               "default": "",
               "type": "int"
            }
         ],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "epochms_add_day",
         "display": "timestamp_add_days",
         "description": "Add a number of days to the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of days",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_add_hour",
         "display": "timestamp_add_hours",
         "description": "Add a number of hours to the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of hours",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_add_minute",
         "display": "timestamp_add_minutes",
         "description": "Add a number of minutes to the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of minutes",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_add_month",
         "display": "timestamp_add_months",
         "description": "Add a number of months to the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of months",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_add_sec",
         "display": "timestamp_add_seconds",
         "description": "Add a number of seconds to the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of seconds",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_add_year",
         "display": "timestamp_add_years",
         "description": "Add a number of years to the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of years",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_day",
         "display": "timestamp_day_of_month",
         "description": "Get day of month from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_dow",
         "display": "timestamp_day_of_week",
         "description": "Get day of week from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_doy",
         "display": "timestamp_day_of_year",
         "description": "Get day of year from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_epoch_day",
         "display": "timestamp_epoch_day",
         "description": "Get the number of days since the unix epoch",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_epoch_hour",
         "display": "timestamp_epoch_hour",
         "description": "Get the number of hours since the unix epoch",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_epoch_minute",
         "display": "timestamp_epoch_minute",
         "description": "Get the number of minutes since the unix epoch",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_epoch_sec",
         "display": "timestamp_epoch_sec",
         "description": "Get the number of seconds since the unix epoch",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_hour",
         "display": "timestamp_hour",
         "description": "Get hour from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_minute",
         "display": "timestamp_minute",
         "description": "Get minute from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_month",
         "display": "timestamp_month",
         "description": "Get month from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_sub_day",
         "display": "timestamp_subtract_days",
         "description": "Subtract a number of days from the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of days",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_sub_hour",
         "display": "timestamp_subtract_hours",
         "description": "Subtract a number of hours from the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of hours",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_sub_minute",
         "display": "timestamp_subtract_minutes",
         "description": "Subtract a number of minutes from the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of minutes",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_sub_month",
         "display": "timestamp_subtract_months",
         "description": "Subtract a number of months from the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of months",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_sub_sec",
         "display": "timestamp_subtract_seconds",
         "description": "Subtract a number of seconds from the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of seconds",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_sub_year",
         "display": "timestamp_subtract_years",
         "description": "Subtract a number of years from the timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "amount",
               "description": "the number of years",
               "default": 1,
               "type": "decimal"
            }
         ],
         "result": {
            "type": "epochms"
         }
      },
      {
         "name": "epochms_week",
         "display": "timestamp_week",
         "description": "Get week from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "epochms_year",
         "display": "timestamp_year",
         "description": "Get year from timestamp",
         "group": "timestamp",
         "entry": {
            "type": ["epochms"]
         },
         "arg": [
            {
               "name": "timezone",
               "description": "the abbreviated timezone",
               "default": "UTC",
               "type": "text"
            }
         ],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "lower",
         "display": "to_lower",
         "description": "Converts all characters to lower case and returns the result",
         "group": "text",
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "upper",
         "display": "to_upper",
         "description": "Converts all characters to upper case and returns the result",
         "group": "text",
         "entry": {
            "type": ["text"]
         },
         "arg": [],
         "result": {
            "type": "text"
         }
      },
      {
         "name": "within",
         "display": "within",
         "description": "Determines if one geometry is within the supplied radius of another geometry",
         "group": "geo",
         "entry": {
            "type": [
               "geo_point",
               "geo_multipoint",
               "geo_linestring",
               "geo_multilinestring",
               "geo_polygon",
               "geo_multipolygon"
            ]
         },
         "arg": [
            {
               "name": "geometry",
               "description": "",
               "default": "",
               "type": "geo_point"
            },
            {
               "name": "distance",
               "description": "Distance from the point in meters",
               "default": "",
               "type": "decimal"
            }
         ],
         "result": {
            "type": "bool"
         }
      }
   ],
   "aggregate": [
      {
         "name": "avg",
         "display": "avg",
         "description": "Average numbers",
         "group": "aggregate functions",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "count",
         "display": "count",
         "description": "count",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "count_distinct",
         "display": "count_distinct",
         "description": "count distinct",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "int"
         }
      },
      {
         "name": "max",
         "display": "max",
         "description": "Max",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "T"
         }
      },
      {
         "name": "median",
         "display": "median",
         "description": "Median",
         "group": "aggregate functions",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "min",
         "display": "min",
         "description": "Min",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "T"
         }
      },
      {
         "name": "sum",
         "display": "sum",
         "description": "Sum numbers",
         "group": "aggregate functions",
         "entry": {
            "type": ["int[]", "decimal[]"]
         },
         "arg": [],
         "result": {
            "type": "decimal"
         }
      },
      {
         "name": "to_distinct_list",
         "display": "to_distinct_list",
         "description": "aggregate to a distinct array",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "json[]"
         }
      },
      {
         "name": "to_distinct_list_asc",
         "display": "to_distinct_list_asc",
         "description": "aggregate to a distinct array sorted in ascending order",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "json[]"
         }
      },
      {
         "name": "to_distinct_list_desc",
         "display": "to_distinct_list_desc",
         "description": "aggregate to a distinct array sorted in descending order",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "json[]"
         }
      },
      {
         "name": "to_list",
         "display": "to_list",
         "description": "aggregate to an array",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "json[]"
         }
      },
      {
         "name": "to_list_asc",
         "display": "to_list_asc",
         "description": "aggregate to an array sorted in ascending order",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "json[]"
         }
      },
      {
         "name": "to_list_desc",
         "display": "to_list_desc",
         "description": "aggregate to an array sorted in descending order",
         "group": "aggregate functions",
         "entry": {
            "type": ["<T>[]"]
         },
         "arg": [],
         "result": {
            "type": "json[]"
         }
      }
   ],
   "statement": [
      {
         "name": "mvp:die",
         "group": "mvp",
         "display": "Stop & Debug",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:return",
         "group": "mvp",
         "display": "Return",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:setheader",
         "group": "mvp",
         "display": "Set Header",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "duplicates?=\"replace\"": "enum|values([\"replace\",\"append\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:dbo_truncate",
         "group": "mvp",
         "display": "Clear All Records",
         "context": {
            "dbo": {
               "id": "int"
            }
         }
      },
      {
         "name": "mvp:dbo_direct_query",
         "group": "mvp",
         "display": "Direct Database Query",
         "context": {
            "code?=\"\"": "text",
            "response_type?=\"list\"": "enum|values([\"list\",\"single\"])",
            "arg[]?=[]": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:dbo_add",
         "group": "mvp",
         "display": "Add Record",
         "context": {
            "dbo": {
               "id": "int"
            }
         }
      },
      {
         "name": "mvp:conditional",
         "group": "mvp",
         "display": "Conditional",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "if?={}": {
               "run[]?=[]": {
                  "name?=\"\"": "text",
                  "as?=\"\"": "text",
                  "context?={}": "json",
                  "description?=\"\"": "text",
                  "disabled?=false": "bool",
                  "mocks?={}": "json",
                  "_xsid?=\"\"": "text",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     },
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  },
                  "addon[]?=[]": {
                     "id?={}": "json",
                     "offset?=\"\"": "text",
                     "as?=\"\"": "text",
                     "children[]?=[]": "mvp_addon",
                     "input[]?=[]": {
                        "name?=\"\"": "text",
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore?=false": "bool",
                        "expand?=false": "bool",
                        "children[]?=[]": "mvp_inputroute",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "output?={}": {
                        "customize?=false": "bool",
                        "items[]?=[]": {
                           "name?=\"\"": "text",
                           "children[]?=[]": "mvp_output"
                        }
                     }
                  },
                  "?runtime?=null": {
                     "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                     "cpu?=\"\"": "text",
                     "memory?=\"\"": "text",
                     "max_retry?=0": "int",
                     "timeout?=0": "int"
                  }
               }
            },
            "else?={}": {
               "run[]?=[]": {
                  "name?=\"\"": "text",
                  "as?=\"\"": "text",
                  "context?={}": "json",
                  "description?=\"\"": "text",
                  "disabled?=false": "bool",
                  "mocks?={}": "json",
                  "_xsid?=\"\"": "text",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     },
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  },
                  "addon[]?=[]": {
                     "id?={}": "json",
                     "offset?=\"\"": "text",
                     "as?=\"\"": "text",
                     "children[]?=[]": "mvp_addon",
                     "input[]?=[]": {
                        "name?=\"\"": "text",
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore?=false": "bool",
                        "expand?=false": "bool",
                        "children[]?=[]": "mvp_inputroute",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "output?={}": {
                        "customize?=false": "bool",
                        "items[]?=[]": {
                           "name?=\"\"": "text",
                           "children[]?=[]": "mvp_output"
                        }
                     }
                  },
                  "?runtime?=null": {
                     "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                     "cpu?=\"\"": "text",
                     "memory?=\"\"": "text",
                     "max_retry?=0": "int",
                     "timeout?=0": "int"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:dbo_del",
         "group": "mvp",
         "display": "Delete Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_delby",
         "group": "mvp",
         "display": "Delete Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_edit",
         "group": "mvp",
         "display": "Edit Record",
         "context": {
            "skip_triggers?=false": "bool",
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_editby",
         "group": "mvp",
         "display": "Edit Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_patch",
         "group": "mvp",
         "display": "Patch Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_addoreditby",
         "group": "mvp",
         "display": "Add or Edit Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_relace",
         "group": "mvp",
         "display": "Replace Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:while",
         "group": "mvp",
         "display": "While loop",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "run[]?=[]": {
               "name?=\"\"": "text",
               "as?=\"\"": "text",
               "context?={}": "json",
               "description?=\"\"": "text",
               "disabled?=false": "bool",
               "mocks?={}": "json",
               "_xsid?=\"\"": "text",
               "input[]?=[]": {
                  "name?=\"\"": "text",
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "ignore?=false": "bool",
                  "expand?=false": "bool",
                  "children[]?=[]": "mvp_inputroute",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  }
               },
               "output?={}": {
                  "customize?=false": "bool",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  },
                  "items[]?=[]": {
                     "name?=\"\"": "text",
                     "children[]?=[]": "mvp_output"
                  }
               },
               "addon[]?=[]": {
                  "id?={}": "json",
                  "offset?=\"\"": "text",
                  "as?=\"\"": "text",
                  "children[]?=[]": "mvp_addon",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  }
               },
               "?runtime?=null": {
                  "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                  "cpu?=\"\"": "text",
                  "memory?=\"\"": "text",
                  "max_retry?=0": "int",
                  "timeout?=0": "int"
               }
            }
         }
      },
      {
         "name": "mvp:for",
         "group": "mvp",
         "display": "For loop",
         "context": {
            "as?=\"\"": "text",
            "cnt?={}": {
               "value?=\"\"": "text",
               "tag?=\"const:int\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            },
            "run[]?=[]": {
               "name?=\"\"": "text",
               "as?=\"\"": "text",
               "context?={}": "json",
               "description?=\"\"": "text",
               "disabled?=false": "bool",
               "mocks?={}": "json",
               "_xsid?=\"\"": "text",
               "input[]?=[]": {
                  "name?=\"\"": "text",
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "ignore?=false": "bool",
                  "expand?=false": "bool",
                  "children[]?=[]": "mvp_inputroute",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  }
               },
               "output?={}": {
                  "customize?=false": "bool",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  },
                  "items[]?=[]": {
                     "name?=\"\"": "text",
                     "children[]?=[]": "mvp_output"
                  }
               },
               "addon[]?=[]": {
                  "id?={}": "json",
                  "offset?=\"\"": "text",
                  "as?=\"\"": "text",
                  "children[]?=[]": "mvp_addon",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  }
               },
               "?runtime?=null": {
                  "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                  "cpu?=\"\"": "text",
                  "memory?=\"\"": "text",
                  "max_retry?=0": "int",
                  "timeout?=0": "int"
               }
            }
         }
      },
      {
         "name": "mvp:foreach",
         "group": "mvp",
         "display": "For Each loop",
         "context": {
            "as?=\"\"": "text",
            "list?={}": {
               "value?=\"\"": "text",
               "tag?=\"var\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            },
            "run[]?=[]": {
               "name?=\"\"": "text",
               "as?=\"\"": "text",
               "context?={}": "json",
               "description?=\"\"": "text",
               "disabled?=false": "bool",
               "mocks?={}": "json",
               "_xsid?=\"\"": "text",
               "input[]?=[]": {
                  "name?=\"\"": "text",
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "ignore?=false": "bool",
                  "expand?=false": "bool",
                  "children[]?=[]": "mvp_inputroute",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  }
               },
               "output?={}": {
                  "customize?=false": "bool",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  },
                  "items[]?=[]": {
                     "name?=\"\"": "text",
                     "children[]?=[]": "mvp_output"
                  }
               },
               "addon[]?=[]": {
                  "id?={}": "json",
                  "offset?=\"\"": "text",
                  "as?=\"\"": "text",
                  "children[]?=[]": "mvp_addon",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  }
               },
               "?runtime?=null": {
                  "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                  "cpu?=\"\"": "text",
                  "memory?=\"\"": "text",
                  "max_retry?=0": "int",
                  "timeout?=0": "int"
               }
            }
         }
      },
      {
         "name": "mvp:foreach_break",
         "group": "mvp",
         "display": "Break out of loop",
         "context": []
      },
      {
         "name": "mvp:foreach_continue",
         "group": "mvp",
         "display": "Go to next iteration of loop",
         "context": []
      },
      {
         "name": "mvp:foreach_remove",
         "group": "mvp",
         "display": "Remove current entry from loop",
         "context": []
      },
      {
         "name": "mvp:db_transaction",
         "group": "mvp",
         "display": "Database Transaction",
         "context": {
            "run[]?=[]": {
               "name?=\"\"": "text",
               "as?=\"\"": "text",
               "context?={}": "json",
               "description?=\"\"": "text",
               "disabled?=false": "bool",
               "mocks?={}": "json",
               "_xsid?=\"\"": "text",
               "input[]?=[]": {
                  "name?=\"\"": "text",
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "ignore?=false": "bool",
                  "expand?=false": "bool",
                  "children[]?=[]": "mvp_inputroute",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  }
               },
               "output?={}": {
                  "customize?=false": "bool",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  },
                  "items[]?=[]": {
                     "name?=\"\"": "text",
                     "children[]?=[]": "mvp_output"
                  }
               },
               "addon[]?=[]": {
                  "id?={}": "json",
                  "offset?=\"\"": "text",
                  "as?=\"\"": "text",
                  "children[]?=[]": "mvp_addon",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  }
               },
               "?runtime?=null": {
                  "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                  "cpu?=\"\"": "text",
                  "memory?=\"\"": "text",
                  "max_retry?=0": "int",
                  "timeout?=0": "int"
               }
            }
         }
      },
      {
         "name": "mvp:function",
         "group": "mvp:hidden",
         "display": "Function",
         "context": {
            "function": {
               "id": "int"
            },
            "?runtime?=null": {
               "mode": "enum|values([\"async-shared\",\"async-dedicated\"])",
               "id": "uuid"
            }
         }
      },
      {
         "name": "mvp:async_function",
         "group": "mvp:hidden",
         "display": "Async Function",
         "context": {
            "query_id?=0": "int",
            "function": {
               "id": "int"
            },
            "runtime": {
               "mode": "enum|values([\"async-shared\",\"async-dedicated\"])",
               "cpu?=\"\"": "text",
               "memory?=\"\"": "text",
               "max_retry?=0": "int",
               "timeout?=300": "int"
            }
         }
      },
      {
         "name": "mvp:async_function_await",
         "group": "mvp",
         "display": "Async Function Await",
         "context": {}
      },
      {
         "name": "mvp:precondition",
         "group": "mvp:hidden",
         "display": "Precondition",
         "context": {
            "error_type?=\"standard\"": "enum|values([\"standard\",\"notfound\",\"toomanyrequests\",\"accessdenied\",\"unauthorized\",\"badrequest\",\"inputerror\"])",
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "error?={}": {
               "value?=\"\"": "text",
               "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            },
            "payload?={}": {
               "value?=\"\"": "text",
               "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:dbo_get",
         "group": "mvp",
         "display": "Get Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_getby",
         "group": "mvp",
         "display": "Get Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:dbo_hasby",
         "group": "mvp",
         "display": "Has Record",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:health",
         "group": "mvp",
         "display": "MVP Health",
         "context": {}
      },
      {
         "name": "mvp:dbo_view",
         "group": "mvp",
         "display": "Query all Records",
         "context": "mvp_context"
      },
      {
         "name": "mvp:array_merge",
         "group": "mvp",
         "display": "Array: Merge",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:array\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:array_push",
         "group": "mvp",
         "display": "Array: Add To End",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:array_pop",
         "group": "mvp",
         "display": "Array: Remove from End",
         "context": {
            "name?=\"\"": "text"
         }
      },
      {
         "name": "mvp:array_shift",
         "group": "mvp",
         "display": "Array: Remove from Beginning",
         "context": {
            "name?=\"\"": "text"
         }
      },
      {
         "name": "mvp:array_unshift",
         "group": "mvp",
         "display": "Array: Add To Beginning",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:array_filter",
         "group": "mvp",
         "display": "Array: Find All Elements",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "array?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:array_filter_count",
         "group": "mvp",
         "display": "Array: Get Element Count",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "array?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:array_find",
         "group": "mvp",
         "display": "Array: Find First Element",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "array?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:array_find_index",
         "group": "mvp",
         "display": "Array: Find First Element Index",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "array?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:array_has",
         "group": "mvp",
         "display": "Array: Has Any Element",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "array?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:array_every",
         "group": "mvp",
         "display": "Array: Has Every Element",
         "context": {
            "expr?={}": {
               "expression[]?=[]": {
                  "type?=\"statement\"": "enum|values([\"statement\",\"group\"])",
                  "or?=false": "bool",
                  "group?": "mvp_search",
                  "statement?={}": {
                     "op?=\"=\"": "text",
                     "left?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "right?={}": {
                        "operand?=\"\"": "text",
                        "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore_empty?=false": "bool",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     }
                  }
               }
            },
            "array?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:object_keys",
         "group": "mvp",
         "display": "Object: Get Keys",
         "context": {
            "object?={}": {
               "value?=\"\"": "text",
               "tag?=\"const:obj\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:object_values",
         "group": "mvp",
         "display": "Object: Get Values",
         "context": {
            "object?={}": {
               "value?=\"\"": "text",
               "tag?=\"const:obj\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:object_entries",
         "group": "mvp",
         "display": "Object: Get Entries",
         "context": {
            "object?={}": {
               "value?=\"\"": "text",
               "tag?=\"const:obj\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:check_pass",
         "group": "mvp",
         "display": "Check Password",
         "context": []
      },
      {
         "name": "mvp:api_request",
         "group": "mvp",
         "display": "External API Request",
         "context": []
      },
      {
         "name": "mvp:microservice_request",
         "group": "mvp",
         "display": "Microservice Request",
         "context": []
      },
      {
         "name": "mvp:lambda",
         "group": "mvp",
         "display": "Lambda",
         "context": {}
      },
      {
         "name": "mvp:rand",
         "group": "mvp",
         "display": "Generate Random Number",
         "context": {}
      },
      {
         "name": "mvp:random_bytes",
         "group": "mvp",
         "display": "Generate Random Bytes",
         "context": {}
      },
      {
         "name": "mvp:guid",
         "group": "mvp",
         "display": "Generate GUID",
         "context": {}
      },
      {
         "name": "mvp:uuid4",
         "group": "mvp",
         "display": "Generate UUID",
         "context": {}
      },
      {
         "name": "mvp:sleep",
         "group": "mvp",
         "display": "Sleep",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"const:int\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:generate_pass",
         "group": "mvp",
         "display": "Generate Password",
         "context": []
      },
      {
         "name": "mvp:create_auth",
         "group": "mvp",
         "display": "Create Authentication Token",
         "context": []
      },
      {
         "name": "mvp:workspace_record_count",
         "group": "mvp",
         "display": "Workspace Record Count",
         "context": {
            "workspace_id": "int"
         }
      },
      {
         "name": "mvp:workspace_stats",
         "group": "mvp",
         "display": "WorkspaceStats",
         "context": {
            "workspace_id": "int"
         }
      },
      {
         "name": "mvp:workspace_bulk_schema_stats",
         "group": "mvp",
         "display": "WorkspaceBulkSchemaStats",
         "context": {}
      },
      {
         "name": "mvp:set_workspace",
         "group": "mvp",
         "display": "Set Workspace",
         "context": []
      },
      {
         "name": "mvp:provide_addons",
         "group": "mvp",
         "display": "Provide Addons",
         "context": {}
      },
      {
         "name": "mvp:provide_autocomplete",
         "group": "mvp",
         "display": "Provide AutoComplete",
         "context": {}
      },
      {
         "name": "mvp:clone_branch",
         "group": "mvp",
         "display": "CloneBranch",
         "context": {}
      },
      {
         "name": "mvp:delete_branch",
         "group": "mvp",
         "display": "DeleteBranch",
         "context": {}
      },
      {
         "name": "mvp:set_branch_live",
         "group": "mvp",
         "display": "SetBranchLive",
         "context": {}
      },
      {
         "name": "mvp:move_queries",
         "group": "mvp",
         "display": "MoveQueries",
         "context": {}
      },
      {
         "name": "mvp:dbo_get_schema",
         "group": "mvp",
         "display": "Get Database Schema",
         "context": {
            "dbo?={}": {
               "id?=\"\"": "text"
            }
         }
      },
      {
         "name": "mvp:enforce_data_source",
         "group": "mvp",
         "display": "EnforceDataSource",
         "context": {}
      },
      {
         "name": "mvp:share_token_enforce_view",
         "group": "mvp",
         "display": "Share Token: Enforce View",
         "context": {}
      },
      {
         "name": "mvp:share_token_enforce_table_ref",
         "group": "mvp",
         "display": "Share Token: Enforce Table Ref",
         "context": {}
      },
      {
         "name": "mvp:share_token_redact_fields",
         "group": "mvp",
         "display": "Share Token: Redact Fields",
         "context": {}
      },
      {
         "name": "mvp:crypto_create_octet_key",
         "group": "mvp",
         "display": "Create Secret Key",
         "context": {}
      },
      {
         "name": "mvp:crypto_create_rsa_key",
         "group": "mvp",
         "display": "Create RSA Key",
         "context": {}
      },
      {
         "name": "mvp:crypto_create_ec_key",
         "group": "mvp",
         "display": "Create Eliptical Curve Key",
         "context": {}
      },
      {
         "name": "mvp:crypto_jws_encode",
         "group": "mvp",
         "display": "JWS Encode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jws_encode2",
         "group": "mvp",
         "display": "JWS Encode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jws_decode",
         "group": "mvp",
         "display": "JWS Decode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jws_decode2",
         "group": "mvp",
         "display": "JWS Decode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jwe_encode",
         "group": "mvp",
         "display": "JWE Encode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jwe_encode2",
         "group": "mvp",
         "display": "JWE Encode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jwe_encode3",
         "group": "mvp",
         "display": "JWE Encode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jwe_decode",
         "group": "mvp",
         "display": "JWE Decode",
         "context": {}
      },
      {
         "name": "mvp:crypto_jwe_decode2",
         "group": "mvp",
         "display": "JWE Decode",
         "context": {}
      },
      {
         "name": "mvp:crypto_encrypt",
         "group": "mvp",
         "display": "Encrypt",
         "context": {}
      },
      {
         "name": "mvp:crypto_decrypt",
         "group": "mvp",
         "display": "Decrypt",
         "context": {}
      },
      {
         "name": "mvp:set_var",
         "group": "mvp",
         "display": "Create Variable",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:update_var",
         "group": "mvp",
         "display": "Update Variable",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:math_add",
         "group": "mvp",
         "display": "Add Number",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:decimal\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:math_sub",
         "group": "mvp",
         "display": "Subtract Number",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:decimal\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:math_mul",
         "group": "mvp",
         "display": "Multiply Number",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:decimal\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:math_div",
         "group": "mvp",
         "display": "Divide Number",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:decimal\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:math_mod",
         "group": "mvp",
         "display": "Modulus Number",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:int\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_append",
         "group": "mvp",
         "display": "Append Text",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_prepend",
         "group": "mvp",
         "display": "Prepend Text",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_trim",
         "group": "mvp",
         "display": "Text: Trim",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_ltrim",
         "group": "mvp",
         "display": "Text: Left Trim",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_rtrim",
         "group": "mvp",
         "display": "Text: Right Trim",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_starts_with",
         "group": "mvp",
         "display": "Text: Starts With",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_istarts_with",
         "group": "mvp",
         "display": "Text: Starts With (case-insensitive)",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_ends_with",
         "group": "mvp",
         "display": "Text: Ends With",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_iends_with",
         "group": "mvp",
         "display": "Text: Ends With (case insensitive)",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_contains",
         "group": "mvp",
         "display": "Text: Contains",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:text_icontains",
         "group": "mvp",
         "display": "Text: Contains (case insensitive)",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:bitwise_and",
         "group": "mvp",
         "display": "Bitwise AND",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:int\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:bitwise_or",
         "group": "mvp",
         "display": "Bitwise OR",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:int\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:bitwise_xor",
         "group": "mvp",
         "display": "Bitwise XOR",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"const:int\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:create_image",
         "group": "mvp",
         "display": "Create Image From File",
         "context": {
            "access?=\"public\"": "enum|values([\"public\",\"private\"])",
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            },
            "filename?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:create_video",
         "group": "mvp",
         "display": "Create Video From File",
         "context": {
            "access?=\"public\"": "enum|values([\"public\",\"private\"])",
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            },
            "filename?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:create_audio",
         "group": "mvp",
         "display": "Create Audio From File",
         "context": {
            "access?=\"public\"": "enum|values([\"public\",\"private\"])",
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            },
            "filename?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:create_attachment",
         "group": "mvp",
         "display": "Create Attachment From File",
         "context": {
            "access?=\"public\"": "enum|values([\"public\",\"private\"])",
            "include_meta?=false": "bool",
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            },
            "filename?={}": {
               "value?=\"\"": "text",
               "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:create_file_resource",
         "group": "mvp",
         "display": "Create File Resource",
         "context": {}
      },
      {
         "name": "mvp:create_var_from_file_resource",
         "group": "mvp",
         "display": "Get File Resource Data",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:delete_file",
         "group": "mvp",
         "display": "Delete File",
         "context": {}
      },
      {
         "name": "mvp:calculate_geo_distance",
         "group": "mvp",
         "display": "Calculate Distance",
         "context": {}
      },
      {
         "name": "mvp:ipaddress_lookup",
         "group": "mvp",
         "display": "IP Address Lookup",
         "context": {}
      },
      {
         "name": "mvp:get_all_input",
         "group": "mvp",
         "display": "Get All Input",
         "context": {}
      },
      {
         "name": "mvp:get_input",
         "group": "mvp",
         "display": "Get All Raw Input",
         "context": {}
      },
      {
         "name": "mvp:get_env",
         "group": "mvp",
         "display": "Get Environment Variables",
         "context": {}
      },
      {
         "name": "mvp:get_vars",
         "group": "mvp",
         "display": "Get All Variables",
         "context": {}
      },
      {
         "name": "mvp:register_dbos",
         "group": "mvp",
         "display": "RegisterDbos",
         "context": []
      },
      {
         "name": "mvp:redis_set",
         "group": "mvp",
         "display": "Set Cache Value",
         "context": {}
      },
      {
         "name": "mvp:redis_del",
         "group": "mvp",
         "display": "Delete Cache Value",
         "context": {}
      },
      {
         "name": "mvp:redis_get",
         "group": "mvp",
         "display": "Get Cache Value",
         "context": {}
      },
      {
         "name": "mvp:redis_has",
         "group": "mvp",
         "display": "Has Cache Value",
         "context": {}
      },
      {
         "name": "mvp:redis_incr",
         "group": "mvp",
         "display": "Increment Cache Value",
         "context": {}
      },
      {
         "name": "mvp:redis_decr",
         "group": "mvp",
         "display": "Decrement Cache Value",
         "context": {}
      },
      {
         "name": "mvp:redis_keys",
         "group": "mvp",
         "display": "Get Cache Keys",
         "context": {}
      },
      {
         "name": "mvp:redis_ratelimit",
         "group": "mvp",
         "display": "Rate Limit",
         "context": {}
      },
      {
         "name": "mvp:redis_pushlist",
         "group": "mvp",
         "display": "Add To End of List",
         "context": {}
      },
      {
         "name": "mvp:redis_poplist",
         "group": "mvp",
         "display": "Remove From End of List",
         "context": {}
      },
      {
         "name": "mvp:redis_shiftlist",
         "group": "mvp",
         "display": "Remove From Beginning of List",
         "context": {}
      },
      {
         "name": "mvp:redis_unshiftlist",
         "group": "mvp",
         "display": "Add To Beginning of List",
         "context": {}
      },
      {
         "name": "mvp:redis_countlist",
         "group": "mvp",
         "display": "Get Length of List",
         "context": {}
      },
      {
         "name": "mvp:redis_rangelist",
         "group": "mvp",
         "display": "Get Elements From List",
         "context": {}
      },
      {
         "name": "mvp:redis_remove_list",
         "group": "mvp",
         "display": "Remove From List",
         "context": {}
      },
      {
         "name": "mvp:start_process_job",
         "group": "mvp",
         "display": "Start Process Job",
         "context": {}
      },
      {
         "name": "mvp:touch_workspace_cache",
         "group": "mvp:hidden",
         "display": "mvp:touch_workspace_cache",
         "context": {}
      },
      {
         "name": "mvp:request_stats",
         "group": "mvp",
         "display": "RequestStats",
         "context": {
            "dbo": "text",
            "id": "int",
            "branch_id?": "int",
            "search": "json"
         }
      },
      {
         "name": "mvp:function_history_stats",
         "group": "mvp",
         "display": "FunctionHistoryStats",
         "context": {
            "dbo": "text",
            "id": "int",
            "branch_id?": "int",
            "search": "json"
         }
      },
      {
         "name": "mvp:create_datasource",
         "group": "mvp",
         "display": "CreateDataSource",
         "context": {}
      },
      {
         "name": "mvp:delete_datasource",
         "group": "mvp",
         "display": "DeleteDataSource",
         "context": {}
      },
      {
         "name": "mvp:update_datasource",
         "group": "mvp",
         "display": "UpdateDataSource",
         "context": {}
      },
      {
         "name": "mvp:workspace_link",
         "group": "mvp",
         "display": "WorkspaceLink",
         "context": {}
      },
      {
         "name": "mvp:merge_branch",
         "group": "mvp",
         "display": "MergeBranch",
         "context": {}
      },
      {
         "name": "mvp:vault_path",
         "group": "mvp",
         "display": "VaultPath",
         "context": {}
      },
      {
         "name": "mvp:vault_sign_url",
         "group": "mvp",
         "display": "Private File: Sign URL",
         "context": {}
      },
      {
         "name": "mvp:delete_vault_ids",
         "group": "mvp",
         "display": "DeleteVaultIds",
         "context": {}
      },
      {
         "name": "mvp:group",
         "group": "mvp",
         "display": "Group",
         "context": {
            "run[]?=[]": {
               "name?=\"\"": "text",
               "as?=\"\"": "text",
               "context?={}": "json",
               "description?=\"\"": "text",
               "disabled?=false": "bool",
               "mocks?={}": "json",
               "_xsid?=\"\"": "text",
               "input[]?=[]": {
                  "name?=\"\"": "text",
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "ignore?=false": "bool",
                  "expand?=false": "bool",
                  "children[]?=[]": "mvp_inputroute",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  }
               },
               "output?={}": {
                  "customize?=false": "bool",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  },
                  "items[]?=[]": {
                     "name?=\"\"": "text",
                     "children[]?=[]": "mvp_output"
                  }
               },
               "addon[]?=[]": {
                  "id?={}": "json",
                  "offset?=\"\"": "text",
                  "as?=\"\"": "text",
                  "children[]?=[]": "mvp_addon",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  }
               },
               "?runtime?=null": {
                  "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                  "cpu?=\"\"": "text",
                  "memory?=\"\"": "text",
                  "max_retry?=0": "int",
                  "timeout?=0": "int"
               }
            }
         }
      },
      {
         "name": "mvp:post_process",
         "group": "mvp",
         "display": "Schedule Post Process",
         "context": {
            "run[]?=[]": {
               "name?=\"\"": "text",
               "as?=\"\"": "text",
               "context?={}": "json",
               "description?=\"\"": "text",
               "disabled?=false": "bool",
               "mocks?={}": "json",
               "_xsid?=\"\"": "text",
               "input[]?=[]": {
                  "name?=\"\"": "text",
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "ignore?=false": "bool",
                  "expand?=false": "bool",
                  "children[]?=[]": "mvp_inputroute",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  }
               },
               "output?={}": {
                  "customize?=false": "bool",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  },
                  "items[]?=[]": {
                     "name?=\"\"": "text",
                     "children[]?=[]": "mvp_output"
                  }
               },
               "addon[]?=[]": {
                  "id?={}": "json",
                  "offset?=\"\"": "text",
                  "as?=\"\"": "text",
                  "children[]?=[]": "mvp_addon",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  }
               },
               "?runtime?=null": {
                  "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                  "cpu?=\"\"": "text",
                  "memory?=\"\"": "text",
                  "max_retry?=0": "int",
                  "timeout?=0": "int"
               }
            }
         }
      },
      {
         "name": "mvp:try_catch",
         "group": "mvp",
         "display": "Try / Catch",
         "context": {
            "if?={}": {
               "run[]?=[]": {
                  "name?=\"\"": "text",
                  "as?=\"\"": "text",
                  "context?={}": "json",
                  "description?=\"\"": "text",
                  "disabled?=false": "bool",
                  "mocks?={}": "json",
                  "_xsid?=\"\"": "text",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     },
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  },
                  "addon[]?=[]": {
                     "id?={}": "json",
                     "offset?=\"\"": "text",
                     "as?=\"\"": "text",
                     "children[]?=[]": "mvp_addon",
                     "input[]?=[]": {
                        "name?=\"\"": "text",
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore?=false": "bool",
                        "expand?=false": "bool",
                        "children[]?=[]": "mvp_inputroute",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "output?={}": {
                        "customize?=false": "bool",
                        "items[]?=[]": {
                           "name?=\"\"": "text",
                           "children[]?=[]": "mvp_output"
                        }
                     }
                  },
                  "?runtime?=null": {
                     "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                     "cpu?=\"\"": "text",
                     "memory?=\"\"": "text",
                     "max_retry?=0": "int",
                     "timeout?=0": "int"
                  }
               }
            },
            "else?={}": {
               "run[]?=[]": {
                  "name?=\"\"": "text",
                  "as?=\"\"": "text",
                  "context?={}": "json",
                  "description?=\"\"": "text",
                  "disabled?=false": "bool",
                  "mocks?={}": "json",
                  "_xsid?=\"\"": "text",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     },
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  },
                  "addon[]?=[]": {
                     "id?={}": "json",
                     "offset?=\"\"": "text",
                     "as?=\"\"": "text",
                     "children[]?=[]": "mvp_addon",
                     "input[]?=[]": {
                        "name?=\"\"": "text",
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore?=false": "bool",
                        "expand?=false": "bool",
                        "children[]?=[]": "mvp_inputroute",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "output?={}": {
                        "customize?=false": "bool",
                        "items[]?=[]": {
                           "name?=\"\"": "text",
                           "children[]?=[]": "mvp_output"
                        }
                     }
                  },
                  "?runtime?=null": {
                     "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                     "cpu?=\"\"": "text",
                     "memory?=\"\"": "text",
                     "max_retry?=0": "int",
                     "timeout?=0": "int"
                  }
               }
            },
            "then?={}": {
               "run[]?=[]": {
                  "name?=\"\"": "text",
                  "as?=\"\"": "text",
                  "context?={}": "json",
                  "description?=\"\"": "text",
                  "disabled?=false": "bool",
                  "mocks?={}": "json",
                  "_xsid?=\"\"": "text",
                  "input[]?=[]": {
                     "name?=\"\"": "text",
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "ignore?=false": "bool",
                     "expand?=false": "bool",
                     "children[]?=[]": "mvp_inputroute",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     }
                  },
                  "output?={}": {
                     "customize?=false": "bool",
                     "filters[]?=[]": {
                        "name?=\"\"": "text",
                        "disabled?=false": "bool",
                        "arg[]?=[]": {
                           "value?=\"\"": "text",
                           "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                           "filters[]?=[]": "mvp_filter"
                        }
                     },
                     "items[]?=[]": {
                        "name?=\"\"": "text",
                        "children[]?=[]": "mvp_output"
                     }
                  },
                  "addon[]?=[]": {
                     "id?={}": "json",
                     "offset?=\"\"": "text",
                     "as?=\"\"": "text",
                     "children[]?=[]": "mvp_addon",
                     "input[]?=[]": {
                        "name?=\"\"": "text",
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "ignore?=false": "bool",
                        "expand?=false": "bool",
                        "children[]?=[]": "mvp_inputroute",
                        "filters[]?=[]": {
                           "name?=\"\"": "text",
                           "disabled?=false": "bool",
                           "arg[]?=[]": {
                              "value?=\"\"": "text",
                              "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                              "filters[]?=[]": "mvp_filter"
                           }
                        }
                     },
                     "output?={}": {
                        "customize?=false": "bool",
                        "items[]?=[]": {
                           "name?=\"\"": "text",
                           "children[]?=[]": "mvp_output"
                        }
                     }
                  },
                  "?runtime?=null": {
                     "mode?=\"disabled\"": "enum|values([\"disabled\",\"async-shared\",\"async-dedicated\"])",
                     "cpu?=\"\"": "text",
                     "memory?=\"\"": "text",
                     "max_retry?=0": "int",
                     "timeout?=0": "int"
                  }
               }
            }
         }
      },
      {
         "name": "mvp:throw_error",
         "group": "mvp",
         "display": "Throw Error",
         "context": {
            "name?=\"\"": "text",
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:csv_stream",
         "group": "mvp",
         "display": "CSV Stream",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:jsonl_stream",
         "group": "mvp",
         "display": "JSONL Stream",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:get_disabled_workspace_ids",
         "group": "mvp",
         "display": "GetDisabledWorkspaceIds",
         "context": {}
      },
      {
         "name": "mvp:require_scope",
         "group": "mvp",
         "display": "RequireScope",
         "context": {}
      },
      {
         "name": "mvp:process_output",
         "group": "mvp",
         "display": "ProcessOutput",
         "context": {}
      },
      {
         "name": "mvp:update_object_security",
         "group": "mvp",
         "display": "Update Object Security",
         "context": {
            "dbo?=\"\"": "text"
         }
      },
      {
         "name": "mvp:set_data_source",
         "group": "mvp",
         "display": "Set Data Source",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:dbo_bulkadd",
         "group": "mvp",
         "display": "Bulk Add Record",
         "context": {
            "dbo": {
               "id": "int"
            }
         }
      },
      {
         "name": "mvp:dbo_bulkdelete",
         "group": "mvp",
         "display": "Bulk Delete Record",
         "context": {
            "dbo": "mvp_dbo",
            "search": "mvp_search"
         }
      },
      {
         "name": "mvp:dbo_bulkpatch",
         "group": "mvp",
         "display": "Bulk Patch Record",
         "context": {
            "dbo": {
               "id": "int"
            }
         }
      },
      {
         "name": "mvp:dbo_bulkupdate",
         "group": "mvp",
         "display": "Bulk Update Record",
         "context": {
            "dbo": {
               "id": "int"
            }
         }
      },
      {
         "name": "mvp:dbo_protect_id_duplicate",
         "group": "mvp",
         "display": "Dbo Protect ID Duplicate",
         "context": {}
      },
      {
         "name": "mvp:dbo_protect_id_schema",
         "group": "mvp",
         "display": "Dbo Protect ID Schema",
         "context": {}
      },
      {
         "name": "mvp:delete_table",
         "group": "mvp",
         "display": "Delete Table",
         "context": {
            "dbo": {
               "id": "int"
            }
         }
      },
      {
         "name": "mvp:create_dbo_content_bulk",
         "group": "mvp",
         "display": "Create Dbo Content Bulk",
         "context": {}
      },
      {
         "name": "mvp:dbo_content_bulkop",
         "group": "mvp",
         "display": "Dbo Content Bulk Op",
         "context": {}
      },
      {
         "name": "mvp:dbo_search_bulkop",
         "group": "mvp",
         "display": "Dbo Search Bulk Op",
         "context": {}
      },
      {
         "name": "mvp:patch_dbo_content",
         "group": "mvp",
         "display": "Patch Dbo Content",
         "context": {}
      },
      {
         "name": "mvp:patch_dbo_content_bulk",
         "group": "mvp",
         "display": "Patch Dbo Content Bulk",
         "context": {}
      },
      {
         "name": "mvp:dbo_generate_data",
         "group": "mvp",
         "display": "Dbo Generate Data",
         "context": {}
      },
      {
         "name": "mvp:middleware_can_add_check",
         "group": "mvp",
         "display": "Middleware Can Add Check",
         "context": {}
      },
      {
         "name": "mvp:middleware_create_inputs",
         "group": "mvp",
         "display": "Middleware Create Inputs",
         "context": {}
      },
      {
         "name": "mvp:middleware_history_stats",
         "group": "mvp",
         "display": "MiddlewareHistoryStats",
         "context": {
            "dbo": "text",
            "id": "int",
            "branch_id?": "int",
            "search": "json"
         }
      },
      {
         "name": "mvp:middleware",
         "group": "mvp:hidden",
         "display": "Middleware",
         "context": {
            "middleware": {
               "id": "int"
            }
         }
      },
      {
         "name": "mvp:trigger_history_stats",
         "group": "mvp",
         "display": "Trigger History Stats",
         "context": {
            "dbo": "text",
            "id": "int",
            "branch_id?": "int",
            "search": "json"
         }
      },
      {
         "name": "mvp:trigger_manual_action",
         "group": "mvp",
         "display": "Trigger Manual Action",
         "context": {}
      },
      {
         "name": "mvp:trigger_run",
         "group": "mvp",
         "display": "Trigger: Run",
         "context": {}
      },
      {
         "name": "mvp:trigger_run_event",
         "group": "mvp",
         "display": "Trigger: Run Event",
         "context": {}
      },
      {
         "name": "mvp:trigger_sync",
         "group": "mvp",
         "display": "Trigger Sync",
         "context": {}
      },
      {
         "name": "mvp:trigger_update_defaults",
         "group": "mvp",
         "display": "Trigger Update Defaults",
         "context": {}
      },
      {
         "name": "mvp:trigger_workspace_sync",
         "group": "mvp",
         "display": "Trigger Workspace Sync",
         "context": {}
      },
      {
         "name": "mvp:connect_webflow_api_request",
         "group": "mvp",
         "display": "Webflow API",
         "context": []
      },
      {
         "name": "mvp:connect_webflow_disable",
         "group": "mvp",
         "display": "Connect Webflow Disable",
         "context": {}
      },
      {
         "name": "mvp:connect_webflow_enable",
         "group": "mvp",
         "display": "Connect Webflow Enable",
         "context": {}
      },
      {
         "name": "mvp:ncscale_oauth_connect",
         "group": "mvp",
         "display": "NcScale OAuth Connect",
         "context": []
      },
      {
         "name": "mvp:ncscale_oauth_disconnect",
         "group": "mvp",
         "display": "NcScale OAuth Disconnect",
         "context": {}
      },
      {
         "name": "mvp:ncscale_oauth_init",
         "group": "mvp",
         "display": "NcScale OAuth Init",
         "context": []
      },
      {
         "name": "mvp:connect_ncscale_send_log",
         "group": "mvp",
         "display": "NcScale: Send Log",
         "context": {}
      },
      {
         "name": "mvp:ncscale_sync_settings",
         "group": "mvp",
         "display": "NcScale: Sync Settings",
         "context": {}
      },
      {
         "name": "mvp:share_token_add",
         "group": "mvp",
         "display": "Share Token: Add",
         "context": {}
      },
      {
         "name": "mvp:share_token_request_2fa",
         "group": "mvp",
         "display": "Share Token: Request 2fa",
         "context": {}
      },
      {
         "name": "mvp:share_token_update",
         "group": "mvp",
         "display": "Share Token: Update",
         "context": {}
      },
      {
         "name": "mvp:google_cloud_storage_create_var_from_file_resource",
         "group": "mvp",
         "display": "Google Cloud Storage: Create Var From File Resource",
         "context": {}
      },
      {
         "name": "mvp:google_cloud_storage_delete_file",
         "group": "mvp",
         "display": "Google Cloud Storage: Delete File",
         "context": {}
      },
      {
         "name": "mvp:google_cloud_storage_get_file_metadata",
         "group": "mvp",
         "display": "Google Cloud Storage: Get File Metadata",
         "context": {}
      },
      {
         "name": "mvp:google_cloud_storage_list_directory",
         "group": "mvp",
         "display": "Google Cloud Storage: List Directory",
         "context": {}
      },
      {
         "name": "mvp:google_cloud_storage_signed_url",
         "group": "mvp",
         "display": "Google Cloud Storage: Signed Url",
         "context": {}
      },
      {
         "name": "mvp:google_cloud_storage_upload_file",
         "group": "mvp",
         "display": "Google Cloud Storage: Upload File",
         "context": {}
      },
      {
         "name": "mvp:amazon_s3_create_var_from_file_resource",
         "group": "mvp",
         "display": "Amazon S3: Create Var From File Resource",
         "context": {}
      },
      {
         "name": "mvp:amazon_s3_delete_file",
         "group": "mvp",
         "display": "Amazon S3: Delete File",
         "context": {}
      },
      {
         "name": "mvp:amazon_s3_get_file_metadata",
         "group": "mvp",
         "display": "Amazon S3: Get File Metadata",
         "context": {}
      },
      {
         "name": "mvp:amazon_s3_list_directory",
         "group": "mvp",
         "display": "Amazon S3: List Directory",
         "context": {}
      },
      {
         "name": "mvp:amazon_s3_signed_url",
         "group": "mvp",
         "display": "Amazon S3: Signed Url",
         "context": {}
      },
      {
         "name": "mvp:amazon_s3_upload_file",
         "group": "mvp",
         "display": "Amazon S3: Upload File",
         "context": {}
      },
      {
         "name": "mvp:amazon_opensearch_request",
         "group": "mvp",
         "display": "Amazon OpenSearch Request",
         "context": {}
      },
      {
         "name": "mvp:amazon_opensearch_document",
         "group": "mvp",
         "display": "AWS OpenSearch: Document",
         "context": {}
      },
      {
         "name": "mvp:amazon_opensearch_query",
         "group": "mvp",
         "display": "AWS OpenSearch: Query",
         "context": {}
      },
      {
         "name": "mvp:elasticsearch_query",
         "group": "mvp",
         "display": "Elasticsearch: Query",
         "context": {}
      },
      {
         "name": "mvp:elasticsearch_document",
         "group": "mvp",
         "display": "Elasticsearch: Document",
         "context": {}
      },
      {
         "name": "mvp:elasticsearch_request",
         "group": "mvp",
         "display": "Elasticsearch: Request",
         "context": {}
      },
      {
         "name": "mvp:algolia_request",
         "group": "mvp",
         "display": "Algolia: Request",
         "context": {}
      },
      {
         "name": "mvp:azure_blob_storage_create_var_from_file_resource",
         "group": "mvp",
         "display": "Azure Blob Storage: Create Var From File Resource",
         "context": {}
      },
      {
         "name": "mvp:azure_blob_storage_delete_file",
         "group": "mvp",
         "display": "Azure Blob Storage: Delete File",
         "context": {}
      },
      {
         "name": "mvp:azure_blob_storage_get_file_metadata",
         "group": "mvp",
         "display": "Azure Blob Storage: Get File Metadata",
         "context": {}
      },
      {
         "name": "mvp:azure_blob_storage_list_directory",
         "group": "mvp",
         "display": "Azure Blob Storage: List Directory",
         "context": {}
      },
      {
         "name": "mvp:azure_blob_storage_signed_url",
         "group": "mvp",
         "display": "Azure Blob Storage: Signed Url",
         "context": {}
      },
      {
         "name": "mvp:azure_blob_storage_upload_file",
         "group": "mvp",
         "display": "Azure Blob Storage: Upload File",
         "context": {}
      },
      {
         "name": "mvp:zip_add_file_resource",
         "group": "mvp",
         "display": "Zip: Add File Resource",
         "context": {
            "file": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "filename": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "zip": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "password": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "password_encryption": {
               "value": "text",
               "tag?=const": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            }
         }
      },
      {
         "name": "mvp:zip_create_file_resource",
         "group": "mvp",
         "display": "Zip: Create File Resource",
         "context": {}
      },
      {
         "name": "mvp:zip_delete_file_resource",
         "group": "mvp",
         "display": "Zip: Delete File Resource",
         "context": {
            "filename": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "zip": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "password": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            }
         }
      },
      {
         "name": "mvp:zip_extract_file_resource",
         "group": "mvp",
         "display": "Zip: Extract File Resource",
         "context": {
            "zip": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "password": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            }
         }
      },
      {
         "name": "mvp:zip_view_contents",
         "group": "mvp",
         "display": "Zip: View Contents",
         "context": {
            "zip": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            },
            "password": {
               "value": "text",
               "tag?=input": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]": "mvp_filter"
            }
         }
      },
      {
         "name": "mvp:socket_dispatch",
         "group": "mvp:hidden",
         "display": "mvp:socket_dispatch",
         "context": {}
      },
      {
         "name": "mvp:debug_log",
         "group": "mvp",
         "display": "Debug Log",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:realtime_dispatch",
         "group": "mvp:hidden",
         "display": "mvp:realtime_dispatch",
         "context": {}
      },
      {
         "name": "mvp:realtime_event",
         "group": "mvp",
         "display": "Realtime Event",
         "context": {
            "channel?={}": {
               "value?=\"\"": "text",
               "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            },
            "data?={}": {
               "value?=\"\"": "text",
               "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
               "filters[]?=[]": {
                  "name?=\"\"": "text",
                  "disabled?=false": "bool",
                  "arg[]?=[]": {
                     "value?=\"\"": "text",
                     "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                     "filters[]?=[]": "mvp_filter"
                  }
               }
            },
            "auth?={}": {
               "dbo_id?=0": "int",
               "row_id?={}": {
                  "value?=\"\"": "text",
                  "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": {
                     "name?=\"\"": "text",
                     "disabled?=false": "bool",
                     "arg[]?=[]": {
                        "value?=\"\"": "text",
                        "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                        "filters[]?=[]": "mvp_filter"
                     }
                  }
               }
            }
         }
      },
      {
         "name": "mvp:realtime_settings",
         "group": "mvp",
         "display": "Realtime Settings",
         "context": {}
      },
      {
         "name": "mvp:realtime_updated_instance",
         "group": "mvp",
         "display": "Realtime Updated Instance",
         "context": []
      },
      {
         "name": "mvp:realtime_update_workspace_settings",
         "group": "mvp",
         "display": "Realtime Update Workspace Settings",
         "context": {}
      },
      {
         "name": "mvp:realtime_workspace_settings_reset_cache",
         "group": "mvp",
         "display": "Realtime Workspace Settings Reset Cache",
         "context": {}
      },
      {
         "name": "mvp:streaming_api_request",
         "group": "mvp",
         "display": "Streaming External API Request",
         "context": {
            "as?=\"\"": "text"
         }
      },
      {
         "name": "mvp:streaming_api_response",
         "group": "mvp",
         "display": "Streaming External API Response",
         "context": {
            "value?=\"\"": "text",
            "tag?=\"const\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
            "filters[]?=[]": {
               "name?=\"\"": "text",
               "disabled?=false": "bool",
               "arg[]?=[]": {
                  "value?=\"\"": "text",
                  "tag?=\"input\"": "enum|values([\"const\",\"const:encoded\",\"const:int\",\"const:decimal\",\"const:bool\",\"const:array\",\"const:epochms\",\"const:obj\",\"const:null\",\"const:expr\",\"const:expr:encoded\",\"input\",\"var\",\"auth\",\"env\",\"setting\",\"col\",\"output\",\"response\",\"trycatch\"])",
                  "filters[]?=[]": "mvp_filter"
               }
            }
         }
      },
      {
         "name": "mvp:test_run",
         "group": "mvp",
         "display": "Test: Run",
         "context": {}
      }
   ]
}
